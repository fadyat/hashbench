<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="550.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="533" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="533" > </text>
<g id="frames">
<g >
<title>__alloc_pages (200,525,054 samples, 0.40%)</title><rect x="453.9" y="101" width="4.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="456.87" y="111.5" ></text>
</g>
<g >
<title>cfree (39,988,731 samples, 0.08%)</title><rect x="591.6" y="389" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="594.62" y="399.5" ></text>
</g>
<g >
<title>unmap_vmas (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="197" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1191.15" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (40,291,127 samples, 0.08%)</title><rect x="34.4" y="373" width="1.0" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="37.45" y="383.5" ></text>
</g>
<g >
<title>begin_new_exec (5,833,602 samples, 0.01%)</title><rect x="10.0" y="293" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1,079,649,302 samples, 2.14%)</title><rect x="659.0" y="389" width="25.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="662.03" y="399.5" >s..</text>
</g>
<g >
<title>get_page_from_freelist (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="133" width="1.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1189.27" y="143.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple&lt;true, true&gt; (38,608,878 samples, 0.08%)</title><rect x="478.2" y="357" width="0.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="481.22" y="367.5" ></text>
</g>
<g >
<title>do_user_addr_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="229" width="5.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="455.93" y="239.5" ></text>
</g>
<g >
<title>clear_bhb_loop (120,263,419 samples, 0.24%)</title><rect x="912.3" y="325" width="2.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="915.33" y="335.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (520,278,119 samples, 1.03%)</title><rect x="722.6" y="357" width="12.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="725.57" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (120,958,926 samples, 0.24%)</title><rect x="656.2" y="373" width="2.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="659.20" y="383.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (38,201,615 samples, 0.08%)</title><rect x="827.3" y="277" width="0.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="830.26" y="287.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (321,784,939 samples, 0.64%)</title><rect x="333.9" y="277" width="7.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="336.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (400,392,338 samples, 0.79%)</title><rect x="224.0" y="309" width="9.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="227.05" y="319.5" ></text>
</g>
<g >
<title>vma_alloc_folio (200,822,823 samples, 0.40%)</title><rect x="336.7" y="149" width="4.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="339.68" y="159.5" ></text>
</g>
<g >
<title>do_anonymous_page (200,822,823 samples, 0.40%)</title><rect x="336.7" y="181" width="4.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="339.68" y="191.5" ></text>
</g>
<g >
<title>filemap_get_pages (804,138,345 samples, 1.59%)</title><rect x="1051.7" y="197" width="18.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1054.65" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::~_Alloc_hider (80,531,370 samples, 0.16%)</title><rect x="660.0" y="373" width="1.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="662.96" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (3,244,845,589 samples, 6.43%)</title><rect x="391.1" y="357" width="75.9" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="394.09" y="367.5" >std::_Ha..</text>
</g>
<g >
<title>clear_page_erms (160,462,683 samples, 0.32%)</title><rect x="337.6" y="85" width="3.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="340.63" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (201,360,753 samples, 0.40%)</title><rect x="779.8" y="357" width="4.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="782.84" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (1,360,685,225 samples, 2.70%)</title><rect x="529.8" y="309" width="31.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="532.81" y="319.5" >st..</text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char*, char, false&gt;::pointer_to (79,633,554 samples, 0.16%)</title><rect x="654.3" y="357" width="1.9" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="657.34" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (80,541,879 samples, 0.16%)</title><rect x="383.6" y="325" width="1.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="386.58" y="335.5" ></text>
</g>
<g >
<title>std::istream&amp; std::istream::_M_extract&lt;unsigned long&gt; (3,478,955,865 samples, 6.90%)</title><rect x="1091.1" y="389" width="81.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1094.13" y="399.5" >std::istr..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_addr (78,455,338 samples, 0.16%)</title><rect x="345.1" y="293" width="1.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="348.13" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (39,923,845 samples, 0.08%)</title><rect x="14.8" y="405" width="1.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="17.84" y="415.5" ></text>
</g>
<g >
<title>trigger_load_balance (5,812,250 samples, 0.01%)</title><rect x="10.0" y="101" width="0.1" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_M_head (40,157,368 samples, 0.08%)</title><rect x="421.1" y="245" width="0.9" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="424.11" y="255.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (120,266,350 samples, 0.24%)</title><rect x="1185.3" y="309" width="2.8" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1188.33" y="319.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,338,852 samples, 0.08%)</title><rect x="332.0" y="309" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="334.97" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (241,547,352 samples, 0.48%)</title><rect x="785.5" y="389" width="5.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="788.49" y="399.5" ></text>
</g>
<g >
<title>unmap_single_vma (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="181" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1191.15" y="191.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (40,315,307 samples, 0.08%)</title><rect x="341.4" y="229" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="344.38" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (39,927,534 samples, 0.08%)</title><rect x="233.4" y="309" width="0.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="236.41" y="319.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="165" width="1.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1183.63" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (39,996,005 samples, 0.08%)</title><rect x="836.6" y="325" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="839.60" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (280,682,048 samples, 0.56%)</title><rect x="1081.8" y="389" width="6.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1084.76" y="399.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (40,352,042 samples, 0.08%)</title><rect x="902.0" y="309" width="0.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="904.99" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6,420,618,803 samples, 12.73%)</title><rect x="56.1" y="341" width="150.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="59.07" y="351.5" >std::_Hashtable&lt;uns..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (442,029,448 samples, 0.88%)</title><rect x="665.6" y="357" width="10.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="668.61" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (201,300,566 samples, 0.40%)</title><rect x="843.1" y="325" width="4.7" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="846.13" y="335.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (40,217,921 samples, 0.08%)</title><rect x="835.7" y="325" width="0.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="838.66" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (240,901,822 samples, 0.48%)</title><rect x="555.1" y="261" width="5.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="558.07" y="271.5" ></text>
</g>
<g >
<title>unmap_single_vma (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="293" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1192.07" y="303.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="245" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1183.63" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (40,313,745 samples, 0.08%)</title><rect x="206.2" y="341" width="1.0" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="209.23" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_key_equals (1,166,221,183 samples, 2.31%)</title><rect x="179.0" y="309" width="27.2" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="181.96" y="319.5" >s..</text>
</g>
<g >
<title>main (50,369,402,093 samples, 99.83%)</title><rect x="11.1" y="421" width="1178.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="14.07" y="431.5" >main</text>
</g>
<g >
<title>__alloc_pages (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="149" width="1.8" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1189.27" y="159.5" ></text>
</g>
<g >
<title>__rcu_read_unlock (40,106,595 samples, 0.08%)</title><rect x="1076.1" y="197" width="1.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1079.11" y="207.5" ></text>
</g>
<g >
<title>do_vmi_munmap (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="245" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1191.15" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (7,863,820,931 samples, 15.59%)</title><rect x="207.2" y="357" width="183.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="210.18" y="367.5" >std::_Hashtable&lt;unsigne..</text>
</g>
<g >
<title>_find_next_and_bit (40,338,852 samples, 0.08%)</title><rect x="332.0" y="133" width="0.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="334.97" y="143.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_M_head (40,214,879 samples, 0.08%)</title><rect x="423.0" y="229" width="0.9" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="425.98" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="421" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1192.07" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (120,127,739 samples, 0.24%)</title><rect x="740.3" y="341" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="743.29" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_addr (38,904,840 samples, 0.08%)</title><rect x="226.9" y="277" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="229.86" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (40,315,307 samples, 0.08%)</title><rect x="341.4" y="277" width="0.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="344.38" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (521,621,894 samples, 1.03%)</title><rect x="446.4" y="277" width="12.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="449.36" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (40,268,815 samples, 0.08%)</title><rect x="17.6" y="405" width="0.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="20.60" y="415.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (39,852,774 samples, 0.08%)</title><rect x="467.9" y="357" width="1.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="470.92" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (440,319,872 samples, 0.87%)</title><rect x="224.0" y="325" width="10.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="227.05" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (40,315,307 samples, 0.08%)</title><rect x="341.4" y="293" width="0.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="344.38" y="303.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (804,138,345 samples, 1.59%)</title><rect x="1051.7" y="181" width="18.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1054.65" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (40,316,500 samples, 0.08%)</title><rect x="229.6" y="277" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="232.65" y="287.5" ></text>
</g>
<g >
<title>scheduler_tick (5,812,250 samples, 0.01%)</title><rect x="10.0" y="117" width="0.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.00" y="127.5" ></text>
</g>
<g >
<title>operator new (39,685,642 samples, 0.08%)</title><rect x="601.9" y="341" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="604.88" y="351.5" ></text>
</g>
<g >
<title>std::locale::operator= (161,203,389 samples, 0.32%)</title><rect x="748.6" y="341" width="3.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="751.63" y="351.5" ></text>
</g>
<g >
<title>nohz_balance_exit_idle (5,812,250 samples, 0.01%)</title><rect x="10.0" y="69" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="79.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (40,315,307 samples, 0.08%)</title><rect x="341.4" y="101" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="344.38" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5,833,602 samples, 0.01%)</title><rect x="10.0" y="453" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (80,540,625 samples, 0.16%)</title><rect x="672.2" y="341" width="1.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="675.18" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (120,266,350 samples, 0.24%)</title><rect x="1185.3" y="277" width="2.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1188.33" y="287.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (40,371,364 samples, 0.08%)</title><rect x="12.0" y="405" width="1.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="15.01" y="415.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::__get_helper&lt;0ul, unsigned long const&amp;&gt; (40,134,695 samples, 0.08%)</title><rect x="423.9" y="277" width="1.0" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="426.92" y="287.5" ></text>
</g>
<g >
<title>__fsnotify_parent (281,049,719 samples, 0.56%)</title><rect x="917.9" y="245" width="6.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="920.95" y="255.5" ></text>
</g>
<g >
<title>operator new (842,246,253 samples, 1.67%)</title><rect x="438.9" y="309" width="19.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="441.87" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4,140,645,394 samples, 8.21%)</title><rect x="810.8" y="373" width="96.8" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="813.80" y="383.5" >std::__cxx1..</text>
</g>
<g >
<title>perf_event_exec (5,833,602 samples, 0.01%)</title><rect x="10.0" y="277" width="0.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>bprm_execve (5,833,602 samples, 0.01%)</title><rect x="10.0" y="373" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_Hash_node (80,057,928 samples, 0.16%)</title><rect x="434.2" y="325" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="437.18" y="335.5" ></text>
</g>
<g >
<title>trigger_load_balance (40,338,852 samples, 0.08%)</title><rect x="332.0" y="165" width="0.9" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="334.97" y="175.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (5,812,250 samples, 0.01%)</title><rect x="10.0" y="245" width="0.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>vma_alloc_folio (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="181" width="1.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1189.27" y="191.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (40,338,852 samples, 0.08%)</title><rect x="332.0" y="245" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="334.97" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (160,810,027 samples, 0.32%)</title><rect x="347.0" y="293" width="3.7" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="349.96" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (200,822,823 samples, 0.40%)</title><rect x="336.7" y="229" width="4.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="339.68" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (38,201,615 samples, 0.08%)</title><rect x="827.3" y="293" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="830.26" y="303.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (38,201,615 samples, 0.08%)</title><rect x="827.3" y="261" width="0.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="830.26" y="271.5" ></text>
</g>
<g >
<title>vma_alloc_folio (200,525,054 samples, 0.40%)</title><rect x="453.9" y="133" width="4.7" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="456.87" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (78,203,627 samples, 0.15%)</title><rect x="15.8" y="405" width="1.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="18.78" y="415.5" ></text>
</g>
<g >
<title>copy_page_to_iter (5,156,656,821 samples, 10.22%)</title><rect x="931.1" y="197" width="120.6" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="934.05" y="207.5" >copy_page_to_iter</text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (80,446,737 samples, 0.16%)</title><rect x="1079.9" y="389" width="1.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1082.88" y="399.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,357,410 samples, 0.08%)</title><rect x="675.0" y="309" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="678.00" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (120,330,557 samples, 0.24%)</title><rect x="647.8" y="373" width="2.8" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="650.78" y="383.5" ></text>
</g>
<g >
<title>all (50,454,899,222 samples, 100%)</title><rect x="10.0" y="501" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;* std::__to_address&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; (40,250,039 samples, 0.08%)</title><rect x="433.2" y="325" width="1.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="436.24" y="335.5" ></text>
</g>
<g >
<title>__vm_munmap (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="245" width="0.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1186.46" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (40,346,534 samples, 0.08%)</title><rect x="814.6" y="357" width="0.9" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="817.56" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (40,111,503 samples, 0.08%)</title><rect x="628.1" y="341" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="631.08" y="351.5" ></text>
</g>
<g >
<title>malloc (240,780,864 samples, 0.48%)</title><rect x="603.8" y="309" width="5.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="606.75" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (3,608,531,046 samples, 7.15%)</title><rect x="480.1" y="341" width="84.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="483.07" y="351.5" >std::__de..</text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (158,791,091 samples, 0.31%)</title><rect x="632.8" y="389" width="3.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="635.79" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (120,283,222 samples, 0.24%)</title><rect x="875.8" y="341" width="2.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="878.78" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (481,629,067 samples, 0.95%)</title><rect x="598.1" y="357" width="11.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="601.12" y="367.5" ></text>
</g>
<g >
<title>load_elf_binary (5,833,602 samples, 0.01%)</title><rect x="10.0" y="309" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="165" width="1.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1189.27" y="175.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;unsigned long&gt;::deallocate (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="341" width="0.9" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1186.46" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (39,332,697 samples, 0.08%)</title><rect x="380.8" y="293" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="383.77" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt; const&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt; const&amp;&gt; (120,318,155 samples, 0.24%)</title><rect x="362.0" y="277" width="2.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="364.99" y="287.5" ></text>
</g>
<g >
<title>get_page_from_freelist (160,462,683 samples, 0.32%)</title><rect x="337.6" y="101" width="3.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="340.63" y="111.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="165" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1053.72" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="389" width="1.0" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1191.15" y="399.5" ></text>
</g>
<g >
<title>update_process_times (38,201,615 samples, 0.08%)</title><rect x="827.3" y="197" width="0.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="830.26" y="207.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (40,367,093 samples, 0.08%)</title><rect x="452.9" y="149" width="1.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="455.93" y="159.5" ></text>
</g>
<g >
<title>do_anonymous_page (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="261" width="1.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1183.63" y="271.5" ></text>
</g>
<g >
<title>clear_page_erms (40,246,072 samples, 0.08%)</title><rect x="1187.2" y="117" width="0.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1190.20" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (842,763,793 samples, 1.67%)</title><rect x="639.3" y="389" width="19.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="642.32" y="399.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (38,155,318 samples, 0.08%)</title><rect x="715.1" y="357" width="0.9" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="718.14" y="367.5" ></text>
</g>
<g >
<title>__vm_munmap (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="261" width="1.0" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1191.15" y="271.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (40,367,093 samples, 0.08%)</title><rect x="452.9" y="133" width="1.0" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="455.93" y="143.5" ></text>
</g>
<g >
<title>unsigned long* std::__relocate_a&lt;unsigned long*, unsigned long*, std::allocator&lt;unsigned long&gt; &gt; (160,542,129 samples, 0.32%)</title><rect x="1184.4" y="341" width="3.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1187.39" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;, 0ul&gt; (481,320,976 samples, 0.95%)</title><rect x="413.6" y="293" width="11.3" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="416.60" y="303.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;(anonymous namespace)::AggregationStats, std::default_delete&lt;(anonymous namespace)::AggregationStats&gt; &gt; (anonymous namespace)::aggregation_test&lt;unsigned long, std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;, main::{lambda (23,101,781,625 samples, 45.79%)</title><rect x="24.2" y="405" width="540.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="27.17" y="415.5" >std::unique_ptr&lt;(anonymous namespace)::AggregationStats, std::default_dele..</text>
</g>
<g >
<title>tick_nohz_highres_handler (38,201,615 samples, 0.08%)</title><rect x="827.3" y="229" width="0.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="830.26" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (40,315,307 samples, 0.08%)</title><rect x="341.4" y="261" width="0.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="344.38" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (38,242,021 samples, 0.08%)</title><rect x="713.3" y="293" width="0.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="716.31" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (677,281,498 samples, 1.34%)</title><rect x="821.7" y="341" width="15.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="824.69" y="351.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (40,310,897 samples, 0.08%)</title><rect x="720.7" y="373" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="723.72" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;unsigned long&gt;::deallocate (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="357" width="1.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1191.15" y="367.5" ></text>
</g>
<g >
<title>dput (40,210,070 samples, 0.08%)</title><rect x="921.7" y="229" width="0.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="924.70" y="239.5" ></text>
</g>
<g >
<title>zap_pte_range (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="133" width="1.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1191.15" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,218,053 samples, 0.08%)</title><rect x="646.8" y="373" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="649.84" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="261" width="1.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1189.27" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (40,315,307 samples, 0.08%)</title><rect x="341.4" y="181" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="344.38" y="191.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="181" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1186.46" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt;::allocate (922,338,467 samples, 1.83%)</title><rect x="437.0" y="325" width="21.6" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="439.99" y="335.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (39,405,585 samples, 0.08%)</title><rect x="675.9" y="357" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="678.95" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (281,679,669 samples, 0.56%)</title><rect x="841.2" y="341" width="6.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="844.25" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (120,674,747 samples, 0.24%)</title><rect x="171.5" y="293" width="2.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="174.46" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="309" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.15" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (80,716,365 samples, 0.16%)</title><rect x="845.9" y="309" width="1.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="848.95" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (40,171,553 samples, 0.08%)</title><rect x="170.5" y="277" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="173.52" y="287.5" ></text>
</g>
<g >
<title>security_file_permission (80,467,146 samples, 0.16%)</title><rect x="1075.2" y="229" width="1.9" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1078.17" y="239.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (280,437,045 samples, 0.56%)</title><rect x="1095.8" y="373" width="6.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1098.82" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (201,504,653 samples, 0.40%)</title><rect x="865.4" y="341" width="4.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="868.45" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (279,053,811 samples, 0.55%)</title><rect x="849.7" y="341" width="6.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="852.67" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (40,285,009 samples, 0.08%)</title><rect x="614.1" y="357" width="0.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="617.10" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt;, true&gt;::_M_get (40,202,413 samples, 0.08%)</title><rect x="436.1" y="309" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="439.05" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1,282,307,784 samples, 2.54%)</title><rect x="141.5" y="293" width="30.0" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="144.47" y="303.5" >st..</text>
</g>
<g >
<title>alloc_anon_folio (200,525,054 samples, 0.40%)</title><rect x="453.9" y="149" width="4.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="456.87" y="159.5" ></text>
</g>
<g >
<title>_copy_to_iter (318,201,026 samples, 0.63%)</title><rect x="932.0" y="181" width="7.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="934.99" y="191.5" ></text>
</g>
<g >
<title>alloc_anon_folio (200,822,823 samples, 0.40%)</title><rect x="336.7" y="165" width="4.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="339.68" y="175.5" ></text>
</g>
<g >
<title>__mmput (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="341" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1192.07" y="351.5" ></text>
</g>
<g >
<title>lru_gen_add_folio (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="181" width="1.0" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1183.63" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_M_head (80,277,565 samples, 0.16%)</title><rect x="422.0" y="245" width="1.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="425.04" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,206,520,466 samples, 2.39%)</title><rect x="178.0" y="325" width="28.2" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="181.02" y="335.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (119,595,468 samples, 0.24%)</title><rect x="633.7" y="357" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="636.70" y="367.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (40,338,852 samples, 0.08%)</title><rect x="332.0" y="261" width="0.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="334.97" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (40,152,535 samples, 0.08%)</title><rect x="902.9" y="341" width="1.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="905.94" y="351.5" ></text>
</g>
<g >
<title>handle_pte_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="181" width="5.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="455.93" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_M_next (1,927,334,019 samples, 3.82%)</title><rect x="481.0" y="325" width="45.1" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="484.01" y="335.5" >std:..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7,043,238,840 samples, 13.96%)</title><rect x="912.3" y="341" width="164.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="915.33" y="351.5" >entry_SYSCALL_64_afte..</text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (1,045,651,378 samples, 2.07%)</title><rect x="181.8" y="293" width="24.4" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="184.78" y="303.5" >s..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt;::deallocate (720,836,182 samples, 1.43%)</title><rect x="543.8" y="293" width="16.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="546.85" y="303.5" ></text>
</g>
<g >
<title>read (39,905,716 samples, 0.08%)</title><rect x="10.1" y="453" width="1.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="13.14" y="463.5" ></text>
</g>
<g >
<title>exc_page_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="245" width="5.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="455.93" y="255.5" ></text>
</g>
<g >
<title>lru_gen_del_folio.constprop.0 (40,315,307 samples, 0.08%)</title><rect x="341.4" y="37" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="344.38" y="47.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple (239,932,652 samples, 0.48%)</title><rect x="426.7" y="309" width="5.6" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="429.68" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (40,082,802 samples, 0.08%)</title><rect x="714.2" y="357" width="0.9" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="717.20" y="367.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (39,905,716 samples, 0.08%)</title><rect x="10.1" y="437" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.14" y="447.5" ></text>
</g>
<g >
<title>std::locale::locale (80,696,184 samples, 0.16%)</title><rect x="770.4" y="357" width="1.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="773.43" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (6,922,975,421 samples, 13.72%)</title><rect x="915.1" y="325" width="162.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="918.14" y="335.5" >do_syscall_64</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (276,506,291 samples, 0.55%)</title><rect x="676.9" y="357" width="6.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="679.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (40,258,930 samples, 0.08%)</title><rect x="140.5" y="293" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="143.52" y="303.5" ></text>
</g>
<g >
<title>std::locale::~locale (67,971,495 samples, 0.13%)</title><rect x="1172.5" y="389" width="1.6" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1175.49" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (40,350,124 samples, 0.08%)</title><rect x="784.5" y="389" width="1.0" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="787.55" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (39,798,583 samples, 0.08%)</title><rect x="477.3" y="357" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="480.29" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,243,341 samples, 0.08%)</title><rect x="815.5" y="357" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="818.51" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_addr (39,964,099 samples, 0.08%)</title><rect x="138.6" y="293" width="1.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="141.65" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (919,012,363 samples, 1.82%)</title><rect x="661.8" y="373" width="21.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="664.84" y="383.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::~_Scoped_node (40,325,974 samples, 0.08%)</title><rect x="467.0" y="357" width="0.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="469.98" y="367.5" ></text>
</g>
<g >
<title>cfree (241,678,571 samples, 0.48%)</title><rect x="778.9" y="373" width="5.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="781.89" y="383.5" ></text>
</g>
<g >
<title>lockref_put_return (40,220,167 samples, 0.08%)</title><rect x="1073.3" y="213" width="0.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1076.29" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,015,020 samples, 0.08%)</title><rect x="1094.9" y="373" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1097.89" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (195,818,217 samples, 0.39%)</title><rect x="856.2" y="325" width="4.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="859.20" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (40,339,066 samples, 0.08%)</title><rect x="693.7" y="357" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="696.68" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;&gt; &gt; (80,657,852 samples, 0.16%)</title><rect x="465.1" y="341" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="468.09" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,542,129 samples, 0.32%)</title><rect x="1184.4" y="325" width="3.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1187.39" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (40,315,307 samples, 0.08%)</title><rect x="341.4" y="309" width="0.9" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="344.38" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (235,518,529 samples, 0.47%)</title><rect x="826.4" y="325" width="5.5" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="829.40" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (39,416,084 samples, 0.08%)</title><rect x="175.2" y="309" width="0.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="178.22" y="319.5" ></text>
</g>
<g >
<title>update_process_times (39,332,697 samples, 0.08%)</title><rect x="380.8" y="181" width="0.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="383.77" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_read (6,883,309,436 samples, 13.64%)</title><rect x="916.1" y="293" width="161.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="919.07" y="303.5" >__x64_sys_read</text>
</g>
<g >
<title>tlb_batch_pages_flush (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="165" width="0.9" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1186.46" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (281,018,840 samples, 0.56%)</title><rect x="44.8" y="325" width="6.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="47.80" y="335.5" ></text>
</g>
<g >
<title>update_process_times (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="53" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1053.72" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_node_allocator (159,994,462 samples, 0.32%)</title><rect x="540.1" y="293" width="3.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="543.10" y="303.5" ></text>
</g>
<g >
<title>std::operator| (39,966,706 samples, 0.08%)</title><rect x="1174.1" y="389" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1177.08" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (6,662,065,067 samples, 13.20%)</title><rect x="51.4" y="357" width="155.8" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="54.37" y="367.5" >std::_Hashtable&lt;unsi..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="133" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1053.72" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (320,633,701 samples, 0.64%)</title><rect x="468.9" y="357" width="7.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="471.85" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="293" width="1.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1183.63" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (6,461,451,867 samples, 12.81%)</title><rect x="234.3" y="341" width="151.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="237.35" y="351.5" >std::_Hashtable&lt;uns..</text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (38,608,878 samples, 0.08%)</title><rect x="478.2" y="341" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="481.22" y="351.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (40,254,304 samples, 0.08%)</title><rect x="682.4" y="325" width="0.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="685.39" y="335.5" ></text>
</g>
<g >
<title>__xas_next (40,288,277 samples, 0.08%)</title><rect x="1066.7" y="165" width="0.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1069.70" y="175.5" ></text>
</g>
<g >
<title>malloc (120,199,454 samples, 0.24%)</title><rect x="829.1" y="277" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="832.09" y="287.5" ></text>
</g>
<g >
<title>scheduler_tick (38,201,615 samples, 0.08%)</title><rect x="827.3" y="181" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="830.26" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::__1st_type&lt;std::pair&lt;unsigned long const, unsigned long&gt; const&amp;&gt;::type&amp;&amp; std::__detail::_Select1st::operator (160,474,725 samples, 0.32%)</title><rect x="361.1" y="293" width="3.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="364.05" y="303.5" ></text>
</g>
<g >
<title>apparmor_file_permission (80,467,146 samples, 0.16%)</title><rect x="1075.2" y="213" width="1.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1078.17" y="223.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (200,822,823 samples, 0.40%)</title><rect x="336.7" y="133" width="4.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="339.68" y="143.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;&amp;&amp; std::forward&lt;std::tuple&lt;unsigned long const&amp;&gt; &gt; (40,225,903 samples, 0.08%)</title><rect x="459.5" y="325" width="0.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="462.51" y="335.5" ></text>
</g>
<g >
<title>malloc (40,361,322 samples, 0.08%)</title><rect x="702.1" y="325" width="0.9" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="705.09" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,056,024 samples, 0.08%)</title><rect x="690.9" y="373" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="693.87" y="383.5" ></text>
</g>
<g >
<title>dget_parent (80,579,133 samples, 0.16%)</title><rect x="919.8" y="229" width="1.9" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="922.82" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (7,123,815,227 samples, 14.12%)</title><rect x="910.4" y="373" width="166.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="913.45" y="383.5" >std::basic_filebuf&lt;ch..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (80,453,616 samples, 0.16%)</title><rect x="681.5" y="341" width="1.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="684.45" y="351.5" ></text>
</g>
<g >
<title>xas_descend (39,858,956 samples, 0.08%)</title><rect x="1068.6" y="149" width="0.9" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1071.58" y="159.5" ></text>
</g>
<g >
<title>__handle_mm_fault (200,822,823 samples, 0.40%)</title><rect x="336.7" y="213" width="4.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="339.68" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (40,056,855 samples, 0.08%)</title><rect x="684.3" y="389" width="0.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="687.28" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="469" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.07" y="479.5" ></text>
</g>
<g >
<title>handle_pte_fault (200,822,823 samples, 0.40%)</title><rect x="336.7" y="197" width="4.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="339.68" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt;, true&gt;::_M_get (40,066,002 samples, 0.08%)</title><rect x="542.9" y="277" width="0.9" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="545.91" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (40,339,317 samples, 0.08%)</title><rect x="638.4" y="389" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="641.38" y="399.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (40,338,852 samples, 0.08%)</title><rect x="332.0" y="229" width="0.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="334.97" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_M_next (80,031,212 samples, 0.16%)</title><rect x="176.1" y="325" width="1.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="179.14" y="335.5" ></text>
</g>
<g >
<title>get_pfnblock_flags_mask (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="101" width="0.9" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1186.46" y="111.5" ></text>
</g>
<g >
<title>tick_sched_handle (40,338,852 samples, 0.08%)</title><rect x="332.0" y="213" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="334.97" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (119,821,761 samples, 0.24%)</title><rect x="1088.3" y="389" width="2.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1091.33" y="399.5" ></text>
</g>
<g >
<title>[unknown] (39,905,716 samples, 0.08%)</title><rect x="10.1" y="469" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.14" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator (40,133,673 samples, 0.08%)</title><rect x="364.8" y="293" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="367.80" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (201,596,292 samples, 0.40%)</title><rect x="609.4" y="357" width="4.7" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="612.38" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_ptr (40,305,841 samples, 0.08%)</title><rect x="139.6" y="293" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="142.58" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false, false&gt;::_Node_iterator (200,340,637 samples, 0.40%)</title><rect x="386.4" y="341" width="4.7" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="389.40" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (40,366,951 samples, 0.08%)</title><rect x="683.3" y="373" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="686.34" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (1,855,265,933 samples, 3.68%)</title><rect x="817.4" y="357" width="43.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="820.39" y="367.5" >std:..</text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (160,553,083 samples, 0.32%)</title><rect x="828.1" y="309" width="3.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="831.15" y="319.5" ></text>
</g>
<g >
<title>unmap_page_range (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="165" width="1.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1191.15" y="175.5" ></text>
</g>
<g >
<title>vfs_read (6,883,309,436 samples, 13.64%)</title><rect x="916.1" y="261" width="161.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="919.07" y="271.5" >vfs_read</text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (80,022,342 samples, 0.16%)</title><rect x="22.3" y="405" width="1.9" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="25.30" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (843,843,387 samples, 1.67%)</title><rect x="595.3" y="373" width="19.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="598.30" y="383.5" ></text>
</g>
<g >
<title>scheduler_tick (40,338,852 samples, 0.08%)</title><rect x="332.0" y="181" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="334.97" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (80,545,115 samples, 0.16%)</title><rect x="718.8" y="373" width="1.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="721.83" y="383.5" ></text>
</g>
<g >
<title>update_process_times (40,338,852 samples, 0.08%)</title><rect x="332.0" y="197" width="0.9" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="334.97" y="207.5" ></text>
</g>
<g >
<title>cfree (80,406,783 samples, 0.16%)</title><rect x="674.1" y="325" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="677.07" y="335.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="357" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1183.63" y="367.5" ></text>
</g>
<g >
<title>touch_atime (40,328,513 samples, 0.08%)</title><rect x="1070.5" y="197" width="0.9" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1073.46" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (6,380,909,988 samples, 12.65%)</title><rect x="234.3" y="325" width="149.3" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="237.35" y="335.5" >std::_Hashtable&lt;uns..</text>
</g>
<g >
<title>std::locale::~locale (40,325,048 samples, 0.08%)</title><rect x="775.1" y="357" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="778.14" y="367.5" ></text>
</g>
<g >
<title>char* std::addressof&lt;char&gt; (40,308,572 samples, 0.08%)</title><rect x="653.4" y="357" width="0.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="656.40" y="367.5" ></text>
</g>
<g >
<title>rep_movs_alternative (4,798,111,584 samples, 9.51%)</title><rect x="939.4" y="181" width="112.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="942.44" y="191.5" >rep_movs_alte..</text>
</g>
<g >
<title>operator new (477,560,799 samples, 0.95%)</title><rect x="703.0" y="325" width="11.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="706.04" y="335.5" ></text>
</g>
<g >
<title>do_vmi_munmap (40,315,307 samples, 0.08%)</title><rect x="341.4" y="149" width="0.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="344.38" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;* std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; (39,629,293 samples, 0.08%)</title><rect x="560.7" y="261" width="0.9" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="563.70" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (120,328,139 samples, 0.24%)</title><rect x="904.8" y="357" width="2.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="907.82" y="367.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (6,280,321,517 samples, 12.45%)</title><rect x="924.5" y="245" width="146.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="927.52" y="255.5" >ext4_file_read_iter</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (40,246,278 samples, 0.08%)</title><rect x="637.4" y="389" width="1.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="640.44" y="399.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::__get_helper&lt;0ul, unsigned long const&amp;&gt; (120,434,933 samples, 0.24%)</title><rect x="421.1" y="261" width="2.8" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="424.11" y="271.5" ></text>
</g>
<g >
<title>alloc_anon_folio (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="197" width="1.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1189.27" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (40,365,601 samples, 0.08%)</title><rect x="903.9" y="357" width="0.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="906.88" y="367.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="213" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1186.46" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (39,946,788 samples, 0.08%)</title><rect x="1089.3" y="373" width="0.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1092.27" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="261" width="0.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1186.46" y="271.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (40,315,307 samples, 0.08%)</title><rect x="341.4" y="133" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="344.38" y="143.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (5,812,250 samples, 0.01%)</title><rect x="10.0" y="197" width="0.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>x64_sys_call (40,315,307 samples, 0.08%)</title><rect x="341.4" y="197" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="344.38" y="207.5" ></text>
</g>
<g >
<title>cfree (119,595,468 samples, 0.24%)</title><rect x="633.7" y="373" width="2.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="636.70" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (2,885,432,039 samples, 5.72%)</title><rect x="393.9" y="341" width="67.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="396.90" y="351.5" >std::__..</text>
</g>
<g >
<title>generic_file_read_iter (6,280,321,517 samples, 12.45%)</title><rect x="924.5" y="229" width="146.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="927.52" y="239.5" >generic_file_read_..</text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (40,328,513 samples, 0.08%)</title><rect x="1070.5" y="149" width="0.9" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1073.46" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_node_allocator (40,202,413 samples, 0.08%)</title><rect x="436.1" y="325" width="0.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="439.05" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_Node_iterator_base (120,039,934 samples, 0.24%)</title><rect x="388.3" y="325" width="2.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="391.28" y="335.5" ></text>
</g>
<g >
<title>std::piecewise_construct_t const&amp; std::forward&lt;std::piecewise_construct_t const&amp;&gt; (37,705,972 samples, 0.07%)</title><rect x="425.8" y="309" width="0.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="428.80" y="319.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="149" width="0.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1186.46" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (559,555,363 samples, 1.11%)</title><rect x="890.8" y="357" width="13.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="893.79" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (80,217,637 samples, 0.16%)</title><rect x="833.8" y="309" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="836.78" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (120,637,492 samples, 0.24%)</title><rect x="678.6" y="341" width="2.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="681.63" y="351.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (40,315,307 samples, 0.08%)</title><rect x="341.4" y="69" width="0.9" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="344.38" y="79.5" ></text>
</g>
<g >
<title>_start (50,369,402,093 samples, 99.83%)</title><rect x="11.1" y="469" width="1178.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="14.07" y="479.5" >_start</text>
</g>
<g >
<title>dput (40,338,623 samples, 0.08%)</title><rect x="1074.2" y="229" width="1.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1077.23" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (3,608,531,046 samples, 7.15%)</title><rect x="480.1" y="357" width="84.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="483.07" y="367.5" >std::_Has..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (157,483,396 samples, 0.31%)</title><rect x="618.7" y="357" width="3.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="621.75" y="367.5" ></text>
</g>
<g >
<title>free_unref_page_list (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="117" width="0.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1186.46" y="127.5" ></text>
</g>
<g >
<title>get_page_from_freelist (200,525,054 samples, 0.40%)</title><rect x="453.9" y="85" width="4.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="456.87" y="95.5" ></text>
</g>
<g >
<title>do_user_addr_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="325" width="1.0" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1183.63" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (840,699,743 samples, 1.67%)</title><rect x="214.7" y="341" width="19.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="217.68" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="277" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1191.15" y="287.5" ></text>
</g>
<g >
<title>operator new (240,780,864 samples, 0.48%)</title><rect x="603.8" y="325" width="5.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="606.75" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,323,670 samples, 0.08%)</title><rect x="627.1" y="341" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="630.14" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (161,234,581 samples, 0.32%)</title><rect x="610.3" y="341" width="3.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="613.33" y="351.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (40,338,852 samples, 0.08%)</title><rect x="332.0" y="277" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="334.97" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (159,816,541 samples, 0.32%)</title><rect x="1168.8" y="357" width="3.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1171.75" y="367.5" ></text>
</g>
<g >
<title>xas_load (120,310,249 samples, 0.24%)</title><rect x="1067.6" y="165" width="2.9" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1070.64" y="175.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (40,265,337 samples, 0.08%)</title><rect x="424.9" y="293" width="0.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="427.86" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (120,522,224 samples, 0.24%)</title><rect x="230.6" y="293" width="2.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="233.59" y="303.5" ></text>
</g>
<g >
<title>perf_event_enable_on_exec (5,833,602 samples, 0.01%)</title><rect x="10.0" y="261" width="0.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>[libc.so.6] (361,899,673 samples, 0.72%)</title><rect x="332.9" y="293" width="8.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="335.92" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="309" width="1.0" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1183.63" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (160,520,852 samples, 0.32%)</title><rect x="831.9" y="325" width="3.8" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="834.90" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::~unordered_map (3,648,905,469 samples, 7.23%)</title><rect x="479.1" y="389" width="85.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="482.12" y="399.5" >std::unord..</text>
</g>
<g >
<title>unmap_vmas (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="309" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1192.07" y="319.5" ></text>
</g>
<g >
<title>x64_sys_call (6,883,309,436 samples, 13.64%)</title><rect x="916.1" y="309" width="161.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="919.07" y="319.5" >x64_sys_call</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (241,143,351 samples, 0.48%)</title><rect x="641.2" y="373" width="5.6" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="644.20" y="383.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (39,332,697 samples, 0.08%)</title><rect x="380.8" y="133" width="0.9" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="383.77" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::operator++ (120,074,115 samples, 0.24%)</title><rect x="27.0" y="389" width="2.8" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="29.98" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="405" width="1.0" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1191.15" y="415.5" ></text>
</g>
<g >
<title>exc_page_fault (120,266,350 samples, 0.24%)</title><rect x="1185.3" y="293" width="2.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1188.33" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash (80,441,642 samples, 0.16%)</title><rect x="347.9" y="277" width="1.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="350.90" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (241,166,137 samples, 0.48%)</title><rect x="335.7" y="245" width="5.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="338.74" y="255.5" ></text>
</g>
<g >
<title>perf-exec (5,833,602 samples, 0.01%)</title><rect x="10.0" y="485" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,563,800,466 samples, 3.10%)</title><rect x="137.7" y="309" width="36.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="140.71" y="319.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3,648,905,469 samples, 7.23%)</title><rect x="479.1" y="373" width="85.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="482.12" y="383.5" >std::_Hash..</text>
</g>
<g >
<title>__munmap (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="325" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1186.46" y="335.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (5,812,250 samples, 0.01%)</title><rect x="10.0" y="165" width="0.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="13.00" y="175.5" ></text>
</g>
<g >
<title>account_process_tick (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="37" width="1.0" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1053.72" y="47.5" ></text>
</g>
<g >
<title>malloc@plt (40,351,063 samples, 0.08%)</title><rect x="437.9" y="309" width="1.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="440.92" y="319.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (40,315,307 samples, 0.08%)</title><rect x="341.4" y="85" width="0.9" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="344.38" y="95.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (39,332,697 samples, 0.08%)</title><rect x="380.8" y="261" width="0.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="383.77" y="271.5" ></text>
</g>
<g >
<title>search_binary_handler (5,833,602 samples, 0.01%)</title><rect x="10.0" y="325" width="0.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>tick_sched_handle (39,332,697 samples, 0.08%)</title><rect x="380.8" y="197" width="0.9" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="383.77" y="207.5" ></text>
</g>
<g >
<title>malloc (802,434,091 samples, 1.59%)</title><rect x="439.8" y="293" width="18.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="442.80" y="303.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (80,616,870 samples, 0.16%)</title><rect x="1181.6" y="373" width="1.9" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1184.57" y="383.5" ></text>
</g>
<g >
<title>exit_mmap (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="325" width="0.9" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1192.07" y="335.5" ></text>
</g>
<g >
<title>_raw_spin_trylock (39,991,323 samples, 0.08%)</title><rect x="1186.3" y="117" width="0.9" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1189.27" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="357" width="0.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1186.46" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (78,698,581 samples, 0.16%)</title><rect x="615.0" y="373" width="1.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="618.04" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_addr (40,305,841 samples, 0.08%)</title><rect x="139.6" y="277" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="142.58" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_M_next (40,275,804 samples, 0.08%)</title><rect x="385.5" y="341" width="0.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="388.46" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="373" width="1.0" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1191.15" y="383.5" ></text>
</g>
<g >
<title>nohz_balancer_kick (40,338,852 samples, 0.08%)</title><rect x="332.0" y="149" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="334.97" y="159.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="261" width="0.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1192.07" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (2,326,840,342 samples, 4.61%)</title><rect x="721.7" y="373" width="54.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="724.66" y="383.5" >std::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (40,145,486 samples, 0.08%)</title><rect x="816.4" y="357" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="819.45" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (79,474,706 samples, 0.16%)</title><rect x="717.0" y="373" width="1.8" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="719.98" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (80,338,016 samples, 0.16%)</title><rect x="897.3" y="325" width="1.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="900.29" y="335.5" ></text>
</g>
<g >
<title>void std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (200,503,643 samples, 0.40%)</title><rect x="1183.5" y="373" width="4.6" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1186.46" y="383.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (120,643,744 samples, 0.24%)</title><rect x="630.0" y="357" width="2.8" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="632.96" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (200,525,054 samples, 0.40%)</title><rect x="453.9" y="117" width="4.7" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="456.87" y="127.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (1,720,136,663 samples, 3.41%)</title><rect x="592.6" y="389" width="40.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="595.56" y="399.5" >std..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (321,961,475 samples, 0.64%)</title><rect x="777.0" y="389" width="7.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="780.02" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::operator bool (79,904,643 samples, 0.16%)</title><rect x="20.4" y="405" width="1.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="23.43" y="415.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (39,332,697 samples, 0.08%)</title><rect x="380.8" y="245" width="0.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="383.77" y="255.5" ></text>
</g>
<g >
<title>read (7,123,815,227 samples, 14.12%)</title><rect x="910.4" y="357" width="166.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="913.45" y="367.5" >read</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_M_cget (40,278,844 samples, 0.08%)</title><rect x="349.8" y="277" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="352.78" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,833,602 samples, 0.01%)</title><rect x="10.0" y="437" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (5,812,250 samples, 0.01%)</title><rect x="10.0" y="229" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>update_process_times (5,812,250 samples, 0.01%)</title><rect x="10.0" y="133" width="0.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.00" y="143.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (80,406,783 samples, 0.16%)</title><rect x="674.1" y="341" width="1.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="677.07" y="351.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (80,716,365 samples, 0.16%)</title><rect x="845.9" y="293" width="1.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="848.95" y="303.5" ></text>
</g>
<g >
<title>lockref_get_not_zero (80,579,133 samples, 0.16%)</title><rect x="919.8" y="213" width="1.9" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="922.82" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (1,298,619,491 samples, 2.57%)</title><rect x="734.7" y="357" width="30.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="737.74" y="367.5" >st..</text>
</g>
<g >
<title>__hrtimer_run_queues (38,201,615 samples, 0.08%)</title><rect x="827.3" y="245" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="830.26" y="255.5" ></text>
</g>
<g >
<title>std::piecewise_construct_t const&amp; std::forward&lt;std::piecewise_construct_t const&amp;&gt; (39,915,075 samples, 0.08%)</title><rect x="464.2" y="341" width="0.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="467.16" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="261" width="5.7" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="455.93" y="271.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (12,346,091,594 samples, 24.47%)</title><rect x="791.1" y="389" width="288.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="794.14" y="399.5" >std::basic_istream&lt;char, std::char_tra..</text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (40,352,042 samples, 0.08%)</title><rect x="902.0" y="293" width="0.9" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="904.99" y="303.5" ></text>
</g>
<g >
<title>std::locale::locale (40,080,933 samples, 0.08%)</title><rect x="776.1" y="373" width="0.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="779.08" y="383.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (38,201,615 samples, 0.08%)</title><rect x="827.3" y="309" width="0.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="830.26" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_M_cget (40,171,553 samples, 0.08%)</title><rect x="170.5" y="261" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="173.52" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,104,265 samples, 0.08%)</title><rect x="476.3" y="357" width="1.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="479.35" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="437" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1192.07" y="447.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (80,613,686 samples, 0.16%)</title><rect x="657.1" y="357" width="1.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="660.14" y="367.5" ></text>
</g>
<g >
<title>decltype  (80,619,124 samples, 0.16%)</title><rect x="1179.7" y="373" width="1.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1182.68" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (837,307,161 samples, 1.66%)</title><rect x="694.6" y="357" width="19.6" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="697.62" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (80,687,358 samples, 0.16%)</title><rect x="381.7" y="309" width="1.9" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="384.69" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator (79,885,322 samples, 0.16%)</title><rect x="474.5" y="341" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="477.48" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (198,526,162 samples, 0.39%)</title><rect x="849.7" y="325" width="4.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="852.67" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="309" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1186.46" y="319.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="149" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1183.63" y="159.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (239,932,652 samples, 0.48%)</title><rect x="426.7" y="293" width="5.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="429.68" y="303.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (227,255,773 samples, 0.45%)</title><rect x="765.1" y="357" width="5.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="768.11" y="367.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (5,812,250 samples, 0.01%)</title><rect x="10.0" y="181" width="0.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;&gt; (521,586,313 samples, 1.03%)</title><rect x="413.6" y="309" width="12.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="416.60" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (557,709,283 samples, 1.11%)</title><rect x="701.2" y="341" width="13.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="704.16" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (442,046,084 samples, 0.88%)</title><rect x="41.0" y="357" width="10.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="44.03" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="213" width="5.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="455.93" y="223.5" ></text>
</g>
<g >
<title>operator new (80,141,341 samples, 0.16%)</title><rect x="699.3" y="341" width="1.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="702.29" y="351.5" ></text>
</g>
<g >
<title>folio_add_lru (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="229" width="1.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1183.63" y="239.5" ></text>
</g>
<g >
<title>_compound_head (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="245" width="0.9" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1192.07" y="255.5" ></text>
</g>
<g >
<title>__rcu_read_lock (40,108,476 samples, 0.08%)</title><rect x="1065.8" y="165" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1068.76" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_node_allocator (38,191,738 samples, 0.08%)</title><rect x="463.3" y="341" width="0.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="466.26" y="351.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (280,966,592 samples, 0.56%)</title><rect x="602.8" y="341" width="6.6" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="605.81" y="351.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_Head_base (38,608,878 samples, 0.08%)</title><rect x="478.2" y="325" width="0.9" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="481.22" y="335.5" ></text>
</g>
<g >
<title>__fsnotify_parent (120,862,664 samples, 0.24%)</title><rect x="1071.4" y="229" width="2.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1074.40" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (561,406,061 samples, 1.11%)</title><rect x="1175.0" y="389" width="13.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1178.02" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="245" width="1.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1189.27" y="255.5" ></text>
</g>
<g >
<title>do_exit (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="389" width="0.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1192.07" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_execve (5,833,602 samples, 0.01%)</title><rect x="10.0" y="405" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>__munmap (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="341" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1191.15" y="351.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,369,402,093 samples, 99.83%)</title><rect x="11.1" y="437" width="1178.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="14.07" y="447.5" >[libc.so.6]</text>
</g>
<g >
<title>exc_page_fault (241,166,137 samples, 0.48%)</title><rect x="335.7" y="261" width="5.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="338.74" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_relocate (160,542,129 samples, 0.32%)</title><rect x="1184.4" y="357" width="3.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1187.39" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (40,046,266 samples, 0.08%)</title><rect x="636.5" y="389" width="0.9" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="639.50" y="399.5" ></text>
</g>
<g >
<title>exit_mm (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="373" width="0.9" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1192.07" y="383.5" ></text>
</g>
<g >
<title>__munmap (40,315,307 samples, 0.08%)</title><rect x="341.4" y="245" width="0.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="344.38" y="255.5" ></text>
</g>
<g >
<title>do_vmi_munmap (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="229" width="0.9" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1186.46" y="239.5" ></text>
</g>
<g >
<title>do_group_exit (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="405" width="0.9" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1192.07" y="415.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,374,423 samples, 0.08%)</title><rect x="479.1" y="341" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="482.12" y="351.5" ></text>
</g>
<g >
<title>__alloc_pages (200,822,823 samples, 0.40%)</title><rect x="336.7" y="117" width="4.7" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="339.68" y="127.5" ></text>
</g>
<g >
<title>operator new (120,199,454 samples, 0.24%)</title><rect x="829.1" y="293" width="2.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="832.09" y="303.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="229" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1191.15" y="239.5" ></text>
</g>
<g >
<title>lru_add_fn (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="197" width="1.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="1183.63" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (38,789,202 samples, 0.08%)</title><rect x="859.9" y="309" width="0.9" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="862.87" y="319.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,040,842,710 samples, 2.06%)</title><rect x="567.3" y="389" width="24.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="570.28" y="399.5" >[..</text>
</g>
<g >
<title>unmap_region (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="197" width="0.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1186.46" y="207.5" ></text>
</g>
<g >
<title>char const* std::__addressof&lt;char const&gt; (40,352,042 samples, 0.08%)</title><rect x="902.0" y="277" width="0.9" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="904.99" y="287.5" ></text>
</g>
<g >
<title>exec_binprm (5,833,602 samples, 0.01%)</title><rect x="10.0" y="341" width="0.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (5,833,602 samples, 0.01%)</title><rect x="10.0" y="357" width="0.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (361,899,673 samples, 0.72%)</title><rect x="332.9" y="309" width="8.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="335.92" y="319.5" ></text>
</g>
<g >
<title>lockref_put_return (80,361,232 samples, 0.16%)</title><rect x="922.6" y="229" width="1.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="925.64" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="325" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.15" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::_M_ptr (38,904,840 samples, 0.08%)</title><rect x="226.9" y="293" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="229.86" y="303.5" ></text>
</g>
<g >
<title>release_pages (40,315,307 samples, 0.08%)</title><rect x="341.4" y="53" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="344.38" y="63.5" ></text>
</g>
<g >
<title>update_cfs_group (38,201,615 samples, 0.08%)</title><rect x="827.3" y="165" width="0.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="830.26" y="175.5" ></text>
</g>
<g >
<title>cfree (40,279,730 samples, 0.08%)</title><rect x="670.3" y="341" width="1.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="673.31" y="351.5" ></text>
</g>
<g >
<title>scheduler_tick (39,332,697 samples, 0.08%)</title><rect x="380.8" y="165" width="0.9" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="383.77" y="175.5" ></text>
</g>
<g >
<title>std::piecewise_construct_t const&amp; std::forward&lt;std::piecewise_construct_t const&amp;&gt; (40,301,472 samples, 0.08%)</title><rect x="458.6" y="325" width="0.9" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="461.56" y="335.5" ></text>
</g>
<g >
<title>unmap_page_range (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="277" width="0.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1192.07" y="287.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="117" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1053.72" y="127.5" ></text>
</g>
<g >
<title>std::locale::~locale (543,475,353 samples, 1.08%)</title><rect x="752.4" y="341" width="12.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="755.40" y="351.5" ></text>
</g>
<g >
<title>__handle_mm_fault (240,892,147 samples, 0.48%)</title><rect x="452.9" y="197" width="5.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="455.93" y="207.5" ></text>
</g>
<g >
<title>atime_needs_update (40,328,513 samples, 0.08%)</title><rect x="1070.5" y="181" width="0.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1073.46" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (161,013,920 samples, 0.32%)</title><rect x="899.2" y="325" width="3.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="902.17" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,001,407,054 samples, 1.98%)</title><rect x="342.3" y="309" width="23.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="345.32" y="319.5" >s..</text>
</g>
<g >
<title>std::locale::locale (236,831,743 samples, 0.47%)</title><rect x="743.1" y="341" width="5.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="746.09" y="351.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;*, std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;, false&gt;::pointer_to (39,629,293 samples, 0.08%)</title><rect x="560.7" y="293" width="0.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="563.70" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (78,711,018 samples, 0.16%)</title><rect x="819.9" y="341" width="1.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="822.85" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (239,798,086 samples, 0.48%)</title><rect x="650.6" y="373" width="5.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="653.59" y="383.5" ></text>
</g>
<g >
<title>__vm_munmap (40,315,307 samples, 0.08%)</title><rect x="341.4" y="165" width="0.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="344.38" y="175.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (80,576,387 samples, 0.16%)</title><rect x="910.4" y="341" width="1.9" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="913.45" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (521,291,669 samples, 1.03%)</title><rect x="878.6" y="357" width="12.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="881.60" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (39,332,697 samples, 0.08%)</title><rect x="380.8" y="277" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="383.77" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (120,648,568 samples, 0.24%)</title><rect x="227.8" y="293" width="2.8" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="230.77" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_Hash_node (80,333,122 samples, 0.16%)</title><rect x="461.4" y="341" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="464.38" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="293" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1186.46" y="303.5" ></text>
</g>
<g >
<title>clear_page_erms (200,525,054 samples, 0.40%)</title><rect x="453.9" y="69" width="4.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="456.87" y="79.5" ></text>
</g>
<g >
<title>filemap_read (6,240,229,562 samples, 12.37%)</title><rect x="925.5" y="213" width="145.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="928.46" y="223.5" >filemap_read</text>
</g>
<g >
<title>unmap_region (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="213" width="1.0" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1191.15" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (40,298,813 samples, 0.08%)</title><rect x="435.1" y="309" width="1.0" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="438.11" y="319.5" ></text>
</g>
<g >
<title>xas_start (40,361,168 samples, 0.08%)</title><rect x="1069.5" y="149" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1072.51" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (195,818,217 samples, 0.39%)</title><rect x="856.2" y="341" width="4.6" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="859.20" y="351.5" ></text>
</g>
<g >
<title>tick_sched_handle (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="69" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1053.72" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,374,423 samples, 0.08%)</title><rect x="479.1" y="357" width="1.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="482.12" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (5,833,602 samples, 0.01%)</title><rect x="10.0" y="421" width="0.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (39,332,697 samples, 0.08%)</title><rect x="380.8" y="213" width="0.9" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="383.77" y="223.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (5,812,250 samples, 0.01%)</title><rect x="10.0" y="213" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1,640,821,528 samples, 3.25%)</title><rect x="526.1" y="325" width="38.4" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="529.09" y="335.5" >std..</text>
</g>
<g >
<title>__libc_start_main (50,369,402,093 samples, 99.83%)</title><rect x="11.1" y="453" width="1178.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="14.07" y="463.5" >__libc_start_main</text>
</g>
<g >
<title>handle_pte_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="277" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.63" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (80,657,502 samples, 0.16%)</title><rect x="13.0" y="405" width="1.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="15.96" y="415.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="149" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1191.15" y="159.5" ></text>
</g>
<g >
<title>release_pages (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="133" width="0.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1186.46" y="143.5" ></text>
</g>
<g >
<title>dget_parent (40,335,290 samples, 0.08%)</title><rect x="1072.3" y="213" width="1.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1075.34" y="223.5" ></text>
</g>
<g >
<title>std::locale::operator= (40,357,707 samples, 0.08%)</title><rect x="629.0" y="341" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="632.02" y="351.5" ></text>
</g>
<g >
<title>x64_sys_call (39,961,514 samples, 0.08%)</title><rect x="1183.5" y="277" width="0.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1186.46" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (521,291,669 samples, 1.03%)</title><rect x="878.6" y="341" width="12.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="881.60" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (78,438,023 samples, 0.16%)</title><rect x="847.8" y="341" width="1.9" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="850.84" y="351.5" ></text>
</g>
<g >
<title>__rcu_read_lock (40,210,070 samples, 0.08%)</title><rect x="921.7" y="213" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="924.70" y="223.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (120,876,510 samples, 0.24%)</title><rect x="1077.1" y="373" width="2.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1080.05" y="383.5" ></text>
</g>
<g >
<title>exc_page_fault (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="341" width="1.0" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1183.63" y="351.5" ></text>
</g>
<g >
<title>perf_event_task_tick (39,332,697 samples, 0.08%)</title><rect x="380.8" y="149" width="0.9" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="383.77" y="159.5" ></text>
</g>
<g >
<title>do_anonymous_page (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="213" width="1.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1189.27" y="223.5" ></text>
</g>
<g >
<title>[unknown] (5,833,602 samples, 0.01%)</title><rect x="10.0" y="469" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (3,925,206,337 samples, 7.78%)</title><rect x="685.2" y="389" width="91.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="688.22" y="399.5" >std::__cxx..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_node_allocator (40,303,087 samples, 0.08%)</title><rect x="561.6" y="309" width="1.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="564.63" y="319.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;*, std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;, false&gt;::pointer_to (80,624,767 samples, 0.16%)</title><rect x="562.6" y="309" width="1.9" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="565.57" y="319.5" ></text>
</g>
<g >
<title>cfree (720,836,182 samples, 1.43%)</title><rect x="543.8" y="277" width="16.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="546.85" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="101" width="1.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1053.72" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (40,311,185 samples, 0.08%)</title><rect x="907.6" y="373" width="1.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="910.63" y="383.5" ></text>
</g>
<g >
<title>tick_sched_handle (38,201,615 samples, 0.08%)</title><rect x="827.3" y="213" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="830.26" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; read_tsv_column&lt;unsigned long&gt; (26,667,796,101 samples, 52.85%)</title><rect x="564.5" y="405" width="623.6" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="567.46" y="415.5" >std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; read_tsv_column&lt;unsigned lo..</text>
</g>
<g >
<title>tick_sched_handle (5,812,250 samples, 0.01%)</title><rect x="10.0" y="149" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="13.00" y="159.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;unsigned long const&amp;&gt; &gt;::type&amp; std::get&lt;0ul, unsigned long const&amp;&gt; (160,689,923 samples, 0.32%)</title><rect x="420.2" y="277" width="3.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="423.16" y="287.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::allocator&lt;char&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::allocator&lt;char&gt;&amp;&gt; (40,206,120 samples, 0.08%)</title><rect x="645.9" y="357" width="0.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="648.90" y="367.5" ></text>
</g>
<g >
<title>std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt; (2,997,816,155 samples, 5.94%)</title><rect x="1102.4" y="373" width="70.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1105.38" y="383.5" >std::is..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (761,977,003 samples, 1.51%)</title><rect x="860.8" y="357" width="17.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="863.78" y="367.5" ></text>
</g>
<g >
<title>mmput (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="357" width="0.9" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1192.07" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,683,745,896 samples, 3.34%)</title><rect x="136.8" y="325" width="39.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="139.77" y="335.5" >std..</text>
</g>
<g >
<title>folio_batch_move_lru (40,252,943 samples, 0.08%)</title><rect x="1180.6" y="213" width="1.0" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="1183.63" y="223.5" ></text>
</g>
<g >
<title>x64_sys_call (39,555,466 samples, 0.08%)</title><rect x="1188.1" y="293" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1191.15" y="303.5" ></text>
</g>
<g >
<title>malloc (357,079,199 samples, 0.71%)</title><rect x="705.9" y="309" width="8.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="708.85" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (240,405,340 samples, 0.48%)</title><rect x="870.2" y="341" width="5.6" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="873.16" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (240,892,147 samples, 0.48%)</title><rect x="452.9" y="165" width="5.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="455.93" y="175.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (5,833,602 samples, 0.01%)</title><rect x="10.0" y="389" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="85" width="1.0" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="1053.72" y="95.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple (40,092,739 samples, 0.08%)</title><rect x="460.4" y="325" width="1.0" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="463.45" y="335.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (322,079,137 samples, 0.64%)</title><rect x="622.4" y="357" width="7.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="625.43" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (441,465,583 samples, 0.87%)</title><rect x="350.7" y="293" width="10.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="353.73" y="303.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (680,099,786 samples, 1.35%)</title><rect x="616.9" y="373" width="15.9" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="619.88" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (40,350,785 samples, 0.08%)</title><rect x="174.3" y="309" width="0.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="177.28" y="319.5" ></text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (120,579,930 samples, 0.24%)</title><rect x="29.8" y="389" width="2.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="32.79" y="399.5" ></text>
</g>
<g >
<title>rw_verify_area (241,668,433 samples, 0.48%)</title><rect x="1071.4" y="245" width="5.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1074.40" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::operator* (40,253,084 samples, 0.08%)</title><rect x="11.1" y="405" width="0.9" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="14.07" y="415.5" ></text>
</g>
<g >
<title>handle_pte_fault (80,237,395 samples, 0.16%)</title><rect x="1186.3" y="229" width="1.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1189.27" y="239.5" ></text>
</g>
<g >
<title>operator new (40,312,148 samples, 0.08%)</title><rect x="432.3" y="325" width="0.9" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="435.30" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (18,973,291,482 samples, 37.60%)</title><rect x="35.4" y="373" width="443.7" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="38.39" y="383.5" >std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned l..</text>
</g>
<g >
<title>decltype  (839,587,066 samples, 1.66%)</title><rect x="412.7" y="325" width="19.6" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="415.66" y="335.5" ></text>
</g>
<g >
<title>nohz_balancer_kick (5,812,250 samples, 0.01%)</title><rect x="10.0" y="85" width="0.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="13.00" y="95.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (40,351,795 samples, 0.08%)</title><rect x="901.0" y="309" width="1.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="904.05" y="319.5" ></text>
</g>
<g >
<title>ksys_read (6,883,309,436 samples, 13.64%)</title><rect x="916.1" y="277" width="161.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="919.07" y="287.5" >ksys_read</text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (80,527,649 samples, 0.16%)</title><rect x="854.3" y="325" width="1.9" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="857.31" y="335.5" ></text>
</g>
<g >
<title>operator delete (39,831,405 samples, 0.08%)</title><rect x="671.3" y="341" width="0.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="674.25" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,076,143,208 samples, 2.13%)</title><rect x="691.8" y="373" width="25.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="694.81" y="383.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long&gt;, true&gt;::_M_cget (40,316,500 samples, 0.08%)</title><rect x="229.6" y="261" width="1.0" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="232.65" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;::_M_next (681,913,859 samples, 1.35%)</title><rect x="365.7" y="309" width="16.0" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="368.74" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (39,757,811 samples, 0.08%)</title><rect x="1189.1" y="453" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.07" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (40,315,307 samples, 0.08%)</title><rect x="341.4" y="213" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="344.38" y="223.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (39,608,936 samples, 0.08%)</title><rect x="1090.2" y="373" width="0.9" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1093.20" y="383.5" ></text>
</g>
<g >
<title>ydb-hashtables- (50,449,065,620 samples, 99.99%)</title><rect x="10.1" y="485" width="1179.9" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.14" y="495.5" >ydb-hashtables-</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (79,963,107 samples, 0.16%)</title><rect x="908.6" y="373" width="1.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="911.58" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (40,251,402 samples, 0.08%)</title><rect x="716.0" y="357" width="1.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="719.03" y="367.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (39,827,532 samples, 0.08%)</title><rect x="1050.7" y="149" width="1.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1053.72" y="159.5" ></text>
</g>
<g >
<title>unmap_region (40,315,307 samples, 0.08%)</title><rect x="341.4" y="117" width="0.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="344.38" y="127.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,338,852 samples, 0.08%)</title><rect x="332.0" y="293" width="0.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="334.97" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt;* std::addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; (39,629,293 samples, 0.08%)</title><rect x="560.7" y="277" width="0.9" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="563.70" y="287.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::fail (80,663,679 samples, 0.16%)</title><rect x="18.5" y="405" width="1.9" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="21.55" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator[] (19,092,048,053 samples, 37.84%)</title><rect x="32.6" y="389" width="446.5" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="35.61" y="399.5" >std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;un..</text>
</g>
<g >
<title>current_time (40,328,513 samples, 0.08%)</title><rect x="1070.5" y="165" width="0.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1073.46" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (398,358,168 samples, 0.79%)</title><rect x="893.6" y="341" width="9.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="896.62" y="351.5" ></text>
</g>
<g >
<title>std::locale::operator= (120,570,157 samples, 0.24%)</title><rect x="772.3" y="357" width="2.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="775.32" y="367.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (39,332,697 samples, 0.08%)</title><rect x="380.8" y="229" width="0.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="383.77" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (361,668,846 samples, 0.72%)</title><rect x="42.9" y="341" width="8.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="45.91" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt;, true&gt;::_M_get (40,303,087 samples, 0.08%)</title><rect x="561.6" y="293" width="1.0" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="564.63" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (158,847,974 samples, 0.31%)</title><rect x="837.5" y="341" width="3.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="840.53" y="351.5" ></text>
</g>
</g>
</svg>
