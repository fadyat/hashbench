<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="582.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="565" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="565" > </text>
<g id="frames">
<g >
<title>char const* std::addressof&lt;char const&gt; (120,809,266 samples, 0.27%)</title><rect x="838.6" y="309" width="3.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="841.61" y="319.5" ></text>
</g>
<g >
<title>std::ios_base::_M_dispose_callbacks (119,802,987 samples, 0.27%)</title><rect x="1091.0" y="405" width="3.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1093.97" y="415.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (40,047,902 samples, 0.09%)</title><rect x="214.4" y="261" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="217.43" y="271.5" ></text>
</g>
<g >
<title>folio_add_lru (40,134,608 samples, 0.09%)</title><rect x="169.0" y="101" width="1.1" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="171.99" y="111.5" ></text>
</g>
<g >
<title>get_page_from_freelist (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="213" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1183.54" y="223.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="101" width="1.1" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1187.69" y="111.5" ></text>
</g>
<g >
<title>unmap_vmas (39,308,457 samples, 0.09%)</title><rect x="307.6" y="197" width="1.0" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="310.57" y="207.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (119,955,630 samples, 0.27%)</title><rect x="225.0" y="293" width="3.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="228.02" y="303.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator!= (40,375,281 samples, 0.09%)</title><rect x="48.3" y="357" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="51.31" y="367.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (40,367,606 samples, 0.09%)</title><rect x="516.5" y="325" width="1.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="519.49" y="335.5" ></text>
</g>
<g >
<title>update_wall_time (40,367,606 samples, 0.09%)</title><rect x="516.5" y="277" width="1.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="519.49" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (399,942,245 samples, 0.90%)</title><rect x="199.6" y="229" width="10.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="202.61" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;&gt; (160,455,693 samples, 0.36%)</title><rect x="215.5" y="277" width="4.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="218.49" y="287.5" ></text>
</g>
<g >
<title>std::locale::locale (80,574,557 samples, 0.18%)</title><rect x="582.0" y="373" width="2.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="584.99" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (120,261,710 samples, 0.27%)</title><rect x="683.8" y="325" width="3.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="686.82" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (40,031,877 samples, 0.09%)</title><rect x="481.6" y="117" width="1.0" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="484.58" y="127.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (39,308,457 samples, 0.09%)</title><rect x="307.6" y="149" width="1.0" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="310.57" y="159.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (40,259,223 samples, 0.09%)</title><rect x="826.0" y="325" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="828.96" y="335.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (39,784,159 samples, 0.09%)</title><rect x="99.2" y="261" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="102.17" y="271.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::destroy_buckets (160,052,794 samples, 0.36%)</title><rect x="303.3" y="357" width="4.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="306.34" y="367.5" ></text>
</g>
<g >
<title>handle_pte_fault (401,885,693 samples, 0.90%)</title><rect x="159.4" y="149" width="10.7" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="162.43" y="159.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (120,767,474 samples, 0.27%)</title><rect x="1097.3" y="405" width="3.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1100.28" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (401,885,693 samples, 0.90%)</title><rect x="159.4" y="165" width="10.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="162.43" y="175.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (39,756,557 samples, 0.09%)</title><rect x="306.5" y="341" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="309.52" y="351.5" ></text>
</g>
<g >
<title>folio_remove_rmap_ptes (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="133" width="1.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1187.69" y="143.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,367,606 samples, 0.09%)</title><rect x="516.5" y="405" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="519.49" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; (40,308,760 samples, 0.09%)</title><rect x="292.7" y="341" width="1.1" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="295.70" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::dense_hashtable (9,771,999,456 samples, 21.88%)</title><rect x="45.1" y="373" width="258.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="48.13" y="383.5" >google::dense_hashtable&lt;std::pair&lt;..</text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple&lt;true, true&gt; (520,627,616 samples, 1.17%)</title><rect x="196.4" y="245" width="13.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="199.42" y="255.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (161,057,792 samples, 0.36%)</title><rect x="361.7" y="357" width="4.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="364.66" y="367.5" ></text>
</g>
<g >
<title>[unknown] (7,515,092 samples, 0.02%)</title><rect x="10.0" y="501" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>unmap_vmas (79,689,652 samples, 0.18%)</title><rect x="480.5" y="229" width="2.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="483.54" y="239.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_deleted (80,653,608 samples, 0.18%)</title><rect x="308.6" y="389" width="2.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="311.61" y="399.5" ></text>
</g>
<g >
<title>__mod_zone_page_state (40,031,877 samples, 0.09%)</title><rect x="481.6" y="69" width="1.0" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="484.58" y="79.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::construct_key (4,842,669,845 samples, 10.84%)</title><rect x="94.9" y="309" width="128.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="97.94" y="319.5" >google::dense_ha..</text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt; google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::insert_at&lt;unsigned long const&amp;, unsigned long&gt; (724,008,765 samples, 1.62%)</title><rect x="310.7" y="389" width="19.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="313.74" y="399.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="69" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1187.69" y="79.5" ></text>
</g>
<g >
<title>decltype  (3,575,377,205 samples, 8.01%)</title><rect x="367.0" y="341" width="94.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="369.98" y="351.5" >decltype </text>
</g>
<g >
<title>exc_page_fault (561,209,806 samples, 1.26%)</title><rect x="157.3" y="213" width="14.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="160.34" y="223.5" ></text>
</g>
<g >
<title>void google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::set_value&lt;unsigned long const&amp;, unsigned long&gt; (200,944,736 samples, 0.45%)</title><rect x="324.6" y="373" width="5.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="327.56" y="383.5" ></text>
</g>
<g >
<title>std::istream&amp; std::istream::_M_extract&lt;unsigned long&gt; (2,880,982,002 samples, 6.45%)</title><rect x="1094.1" y="421" width="76.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1097.14" y="431.5" >std::ist..</text>
</g>
<g >
<title>std::tuple&lt;&gt; std::forward_as_tuple&lt;&gt; (120,288,852 samples, 0.27%)</title><rect x="219.7" y="277" width="3.2" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="222.73" y="287.5" ></text>
</g>
<g >
<title>std::locale::~locale (80,178,680 samples, 0.18%)</title><rect x="1173.4" y="421" width="2.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1176.42" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (882,345,769 samples, 1.98%)</title><rect x="534.5" y="389" width="23.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="537.48" y="399.5" >s..</text>
</g>
<g >
<title>google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::~dense_hash_map (199,427,050 samples, 0.45%)</title><rect x="477.4" y="421" width="5.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="480.37" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (120,298,402 samples, 0.27%)</title><rect x="1186.8" y="277" width="3.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1189.82" y="287.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (39,756,557 samples, 0.09%)</title><rect x="306.5" y="309" width="1.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="309.52" y="319.5" ></text>
</g>
<g >
<title>cfree (161,280,977 samples, 0.36%)</title><rect x="599.0" y="405" width="4.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="602.02" y="415.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="165" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1187.69" y="175.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (39,784,159 samples, 0.09%)</title><rect x="99.2" y="245" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="102.17" y="255.5" ></text>
</g>
<g >
<title>unmap_single_vma (79,689,652 samples, 0.18%)</title><rect x="480.5" y="213" width="2.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="483.54" y="223.5" ></text>
</g>
<g >
<title>scheduler_tick (40,328,240 samples, 0.09%)</title><rect x="892.5" y="229" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="895.48" y="239.5" ></text>
</g>
<g >
<title>atime_needs_update (40,326,331 samples, 0.09%)</title><rect x="1069.7" y="213" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1072.75" y="223.5" ></text>
</g>
<g >
<title>zap_pte_range (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="149" width="1.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1187.69" y="159.5" ></text>
</g>
<g >
<title>handle_pte_fault (80,002,539 samples, 0.18%)</title><rect x="1187.9" y="261" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1190.89" y="271.5" ></text>
</g>
<g >
<title>search_binary_handler (7,515,092 samples, 0.02%)</title><rect x="10.0" y="357" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (40,031,589 samples, 0.09%)</title><rect x="559.9" y="389" width="1.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="562.91" y="399.5" ></text>
</g>
<g >
<title>__libc_start_main (44,649,102,786 samples, 99.98%)</title><rect x="10.2" y="485" width="1179.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.20" y="495.5" >__libc_start_main</text>
</g>
<g >
<title>std::unique_ptr&lt;(anonymous namespace)::AggregationStats, std::default_delete&lt;(anonymous namespace)::AggregationStats&gt; &gt; (anonymous namespace)::aggregation_test&lt;unsigned long, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;, main::{lambda (17,600,263,012 samples, 39.41%)</title><rect x="17.6" y="437" width="465.0" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="20.57" y="447.5" >std::unique_ptr&lt;(anonymous namespace)::AggregationStats, std::d..</text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (240,925,906 samples, 0.54%)</title><rect x="265.1" y="277" width="6.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="268.14" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (80,458,817 samples, 0.18%)</title><rect x="465.7" y="357" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="468.70" y="367.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (40,367,606 samples, 0.09%)</title><rect x="516.5" y="309" width="1.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="519.49" y="319.5" ></text>
</g>
<g >
<title>apparmor_file_permission (80,246,156 samples, 0.18%)</title><rect x="1072.9" y="261" width="2.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1075.93" y="271.5" ></text>
</g>
<g >
<title>security_file_permission (40,268,945 samples, 0.09%)</title><rect x="1075.1" y="261" width="1.0" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1078.05" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (197,952,370 samples, 0.44%)</title><rect x="606.5" y="405" width="5.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="609.47" y="415.5" ></text>
</g>
<g >
<title>x64_sys_call (5,909,377,341 samples, 13.23%)</title><rect x="920.0" y="341" width="156.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="922.97" y="351.5" >x64_sys_call</text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (80,327,558 samples, 0.18%)</title><rect x="363.8" y="325" width="2.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="366.79" y="335.5" ></text>
</g>
<g >
<title>std::locale::operator= (160,809,380 samples, 0.36%)</title><rect x="589.4" y="389" width="4.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="592.44" y="399.5" ></text>
</g>
<g >
<title>decltype  (80,593,102 samples, 0.18%)</title><rect x="351.0" y="357" width="2.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="354.04" y="367.5" ></text>
</g>
<g >
<title>clear_page_erms (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="149" width="1.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1191.94" y="159.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::bucket_count (40,344,602 samples, 0.09%)</title><rect x="67.4" y="341" width="1.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="70.39" y="351.5" ></text>
</g>
<g >
<title>clear_page_erms (240,921,713 samples, 0.54%)</title><rect x="162.6" y="37" width="6.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="165.63" y="47.5" ></text>
</g>
<g >
<title>do_syscall_64 (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="325" width="1.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1187.69" y="335.5" ></text>
</g>
<g >
<title>std::locale::operator= (80,690,048 samples, 0.18%)</title><rect x="726.9" y="389" width="2.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="729.91" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (474,782,204 samples, 1.06%)</title><rect x="885.2" y="373" width="12.6" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="888.22" y="383.5" ></text>
</g>
<g >
<title>main (44,649,102,786 samples, 99.98%)</title><rect x="10.2" y="453" width="1179.8" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.20" y="463.5" >main</text>
</g>
<g >
<title>google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey::operator (4,201,887,023 samples, 9.41%)</title><rect x="104.5" y="277" width="111.0" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="107.46" y="287.5" >google::dense..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (78,236,328 samples, 0.18%)</title><rect x="785.1" y="389" width="2.0" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="788.06" y="399.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (39,308,457 samples, 0.09%)</title><rect x="307.6" y="229" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="310.57" y="239.5" ></text>
</g>
<g >
<title>google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::deallocate (39,308,457 samples, 0.09%)</title><rect x="307.6" y="357" width="1.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="310.57" y="367.5" ></text>
</g>
<g >
<title>decltype  (149,007,610 samples, 0.33%)</title><rect x="1179.8" y="405" width="3.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1182.79" y="415.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (199,948,044 samples, 0.45%)</title><rect x="1081.4" y="421" width="5.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1084.43" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (201,417,822 samples, 0.45%)</title><rect x="856.6" y="373" width="5.4" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="859.63" y="383.5" ></text>
</g>
<g >
<title>__munmap (39,308,457 samples, 0.09%)</title><rect x="307.6" y="341" width="1.0" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="310.57" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (722,684,584 samples, 1.62%)</title><rect x="667.9" y="389" width="19.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="670.90" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (120,119,113 samples, 0.27%)</title><rect x="781.9" y="389" width="3.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="784.88" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,035,262 samples, 0.09%)</title><rect x="632.9" y="373" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="635.89" y="383.5" ></text>
</g>
<g >
<title>folio_add_lru_vma (40,134,608 samples, 0.09%)</title><rect x="169.0" y="117" width="1.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="171.99" y="127.5" ></text>
</g>
<g >
<title>load_elf_binary (7,515,092 samples, 0.02%)</title><rect x="10.0" y="341" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (197,356,160 samples, 0.44%)</title><rect x="831.3" y="373" width="5.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="834.27" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (120,227,142 samples, 0.27%)</title><rect x="823.9" y="341" width="3.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="826.85" y="351.5" ></text>
</g>
<g >
<title>bprm_execve (7,515,092 samples, 0.02%)</title><rect x="10.0" y="405" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>make_vfsuid (40,326,331 samples, 0.09%)</title><rect x="1069.7" y="197" width="1.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1072.75" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (79,689,652 samples, 0.18%)</title><rect x="480.5" y="341" width="2.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="483.54" y="351.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (39,950,588 samples, 0.09%)</title><rect x="328.8" y="357" width="1.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="331.81" y="367.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_Head_base (200,344,241 samples, 0.45%)</title><rect x="204.9" y="213" width="5.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="207.89" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_read (5,909,377,341 samples, 13.23%)</title><rect x="920.0" y="325" width="156.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="922.97" y="335.5" >__x64_sys_read</text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (320,913,985 samples, 0.72%)</title><rect x="30.3" y="389" width="8.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="33.29" y="399.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="117" width="1.1" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1187.69" y="127.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (641,508,605 samples, 1.44%)</title><rect x="540.8" y="373" width="17.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="543.84" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (80,332,928 samples, 0.18%)</title><rect x="648.8" y="421" width="2.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="651.81" y="431.5" ></text>
</g>
<g >
<title>release_pages (40,031,877 samples, 0.09%)</title><rect x="481.6" y="101" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="484.58" y="111.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (40,296,602 samples, 0.09%)</title><rect x="691.2" y="405" width="1.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="694.23" y="415.5" ></text>
</g>
<g >
<title>clear_bhb_loop (39,777,737 samples, 0.09%)</title><rect x="912.6" y="373" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="915.61" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (361,183,499 samples, 0.81%)</title><rect x="628.6" y="389" width="9.6" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="631.64" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (79,012,612 samples, 0.18%)</title><rect x="877.8" y="373" width="2.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="880.83" y="383.5" ></text>
</g>
<g >
<title>unmap_vmas (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="213" width="1.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1187.69" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (40,260,992 samples, 0.09%)</title><rect x="611.7" y="405" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="614.70" y="415.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (40,211,836 samples, 0.09%)</title><rect x="904.1" y="325" width="1.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="907.14" y="335.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (161,050,989 samples, 0.36%)</title><rect x="344.7" y="341" width="4.2" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="347.66" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_empty (1,401,534,133 samples, 3.14%)</title><rect x="252.5" y="309" width="37.0" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="255.49" y="319.5" >goo..</text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (79,269,869 samples, 0.18%)</title><rect x="895.7" y="357" width="2.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="898.67" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6,107,494,826 samples, 13.68%)</title><rect x="914.7" y="373" width="161.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="917.73" y="383.5" >entry_SYSCALL_64_aft..</text>
</g>
<g >
<title>__mod_lruvec_state (39,308,457 samples, 0.09%)</title><rect x="307.6" y="85" width="1.0" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="310.57" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (668,945,873 samples, 1.50%)</title><rect x="800.9" y="373" width="17.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="803.89" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (80,182,834 samples, 0.18%)</title><rect x="818.6" y="373" width="2.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="821.56" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (39,752,193 samples, 0.09%)</title><rect x="675.3" y="341" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="678.33" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::construct_key (120,815,987 samples, 0.27%)</title><rect x="68.5" y="325" width="3.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="71.46" y="335.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (78,938,567 samples, 0.18%)</title><rect x="622.3" y="405" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="625.32" y="415.5" ></text>
</g>
<g >
<title>decltype  (279,597,119 samples, 0.63%)</title><rect x="275.8" y="277" width="7.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="278.77" y="287.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (40,367,606 samples, 0.09%)</title><rect x="516.5" y="341" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="519.49" y="351.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (40,202,393 samples, 0.09%)</title><rect x="159.4" y="101" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="162.43" y="111.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (7,515,092 samples, 0.02%)</title><rect x="10.0" y="389" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>__alloc_pages (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="181" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1191.94" y="191.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (562,300,931 samples, 1.26%)</title><rect x="672.1" y="373" width="14.9" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="675.14" y="383.5" ></text>
</g>
<g >
<title>tick_sched_handle (40,328,240 samples, 0.09%)</title><rect x="892.5" y="261" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="895.48" y="271.5" ></text>
</g>
<g >
<title>unmap_region (79,689,652 samples, 0.18%)</title><rect x="480.5" y="245" width="2.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="483.54" y="255.5" ></text>
</g>
<g >
<title>vm_normal_folio (40,211,836 samples, 0.09%)</title><rect x="904.1" y="181" width="1.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="907.14" y="191.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,467,083 samples, 0.18%)</title><rect x="579.9" y="373" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="582.86" y="383.5" ></text>
</g>
<g >
<title>dget_parent (39,790,688 samples, 0.09%)</title><rect x="923.1" y="261" width="1.1" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="926.12" y="271.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::construct_key (280,384,775 samples, 0.63%)</title><rect x="87.5" y="309" width="7.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="90.53" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (39,812,414 samples, 0.09%)</title><rect x="837.6" y="341" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="840.56" y="351.5" ></text>
</g>
<g >
<title>folio_remove_rmap_ptes (39,308,457 samples, 0.09%)</title><rect x="307.6" y="117" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="310.57" y="127.5" ></text>
</g>
<g >
<title>unsigned long google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::hash&lt;unsigned long&gt; (120,692,420 samples, 0.27%)</title><rect x="297.0" y="325" width="3.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="299.97" y="335.5" ></text>
</g>
<g >
<title>operator delete (80,253,628 samples, 0.18%)</title><rect x="630.8" y="373" width="2.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="633.77" y="383.5" ></text>
</g>
<g >
<title>std::locale::~locale (40,344,299 samples, 0.09%)</title><rect x="718.4" y="373" width="1.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="721.42" y="383.5" ></text>
</g>
<g >
<title>__vm_munmap (39,308,457 samples, 0.09%)</title><rect x="307.6" y="261" width="1.0" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="310.57" y="271.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::~dense_hashtable (199,361,251 samples, 0.45%)</title><rect x="303.3" y="373" width="5.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="306.34" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (39,469,999 samples, 0.09%)</title><rect x="690.2" y="405" width="1.0" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="693.19" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (40,229,655 samples, 0.09%)</title><rect x="692.3" y="405" width="1.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="695.30" y="415.5" ></text>
</g>
<g >
<title>xas_start (39,847,268 samples, 0.09%)</title><rect x="1067.6" y="181" width="1.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1070.63" y="191.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::dense_hashtable_iterator (120,404,324 samples, 0.27%)</title><rect x="321.4" y="373" width="3.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="324.38" y="383.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1,312,570,526 samples, 2.94%)</title><rect x="695.4" y="405" width="34.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="698.42" y="415.5" >st..</text>
</g>
<g >
<title>malloc (39,954,730 samples, 0.09%)</title><rect x="814.3" y="309" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="817.33" y="319.5" ></text>
</g>
<g >
<title>decltype  (159,760,212 samples, 0.36%)</title><rect x="228.2" y="325" width="4.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="231.19" y="335.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (39,834,456 samples, 0.09%)</title><rect x="231.4" y="309" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="234.36" y="319.5" ></text>
</g>
<g >
<title>exec_binprm (7,515,092 samples, 0.02%)</title><rect x="10.0" y="373" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>unsigned long google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::hash&lt;unsigned long&gt; (39,960,314 samples, 0.09%)</title><rect x="300.2" y="341" width="1.0" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="303.16" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,348,585 samples, 0.09%)</title><rect x="641.4" y="373" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="644.36" y="383.5" ></text>
</g>
<g >
<title>task_work_run (40,211,836 samples, 0.09%)</title><rect x="904.1" y="309" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="907.14" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (39,805,628 samples, 0.09%)</title><rect x="12.3" y="437" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="15.32" y="447.5" ></text>
</g>
<g >
<title>decltype  (3,494,674,711 samples, 7.83%)</title><rect x="369.1" y="325" width="92.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="372.11" y="335.5" >decltype </text>
</g>
<g >
<title>__hrtimer_run_queues (39,756,557 samples, 0.09%)</title><rect x="306.5" y="277" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="309.52" y="287.5" ></text>
</g>
<g >
<title>[libc.so.6] (160,644,344 samples, 0.36%)</title><rect x="1185.8" y="357" width="4.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1188.76" y="367.5" ></text>
</g>
<g >
<title>_start (44,649,102,786 samples, 99.98%)</title><rect x="10.2" y="501" width="1179.8" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="13.20" y="511.5" >_start</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (40,362,772 samples, 0.09%)</title><rect x="897.8" y="373" width="1.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="900.76" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (722,977,880 samples, 1.62%)</title><rect x="845.0" y="389" width="19.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="847.97" y="399.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (281,021,581 samples, 0.63%)</title><rect x="1086.7" y="421" width="7.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1089.71" y="431.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (80,706,481 samples, 0.18%)</title><rect x="587.3" y="389" width="2.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="590.31" y="399.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_Tuple_impl (39,802,002 samples, 0.09%)</title><rect x="195.4" y="245" width="1.0" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="198.37" y="255.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::resize_delta (10,171,608,160 samples, 22.78%)</title><rect x="39.8" y="389" width="268.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="42.83" y="399.5" >google::dense_hashtable&lt;std::pair&lt;u..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (161,167,070 samples, 0.36%)</title><rect x="777.6" y="389" width="4.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="780.62" y="399.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (40,005,626 samples, 0.09%)</title><rect x="171.1" y="181" width="1.1" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="174.12" y="191.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (39,882,064 samples, 0.09%)</title><rect x="232.4" y="325" width="1.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="235.42" y="335.5" ></text>
</g>
<g >
<title>[libc.so.6] (440,653,050 samples, 0.99%)</title><rect x="865.1" y="373" width="11.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="868.12" y="383.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (80,290,794 samples, 0.18%)</title><rect x="14.4" y="437" width="2.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="17.39" y="447.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,211,836 samples, 0.09%)</title><rect x="904.1" y="357" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="907.14" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (80,468,916 samples, 0.18%)</title><rect x="594.8" y="405" width="2.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="597.76" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt;::tuple&lt;true, true&gt; (40,327,817 samples, 0.09%)</title><rect x="213.4" y="261" width="1.0" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="216.36" y="271.5" ></text>
</g>
<g >
<title>malloc (40,223,881 samples, 0.09%)</title><rect x="673.2" y="357" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="676.21" y="367.5" ></text>
</g>
<g >
<title>__lruvec_stat_mod_folio (39,308,457 samples, 0.09%)</title><rect x="307.6" y="101" width="1.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="310.57" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (79,689,652 samples, 0.18%)</title><rect x="480.5" y="357" width="2.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="483.54" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (40,259,249 samples, 0.09%)</title><rect x="626.5" y="405" width="1.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="629.52" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,327,869 samples, 0.09%)</title><rect x="663.6" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="666.65" y="415.5" ></text>
</g>
<g >
<title>__cond_resched (39,812,718 samples, 0.09%)</title><rect x="1071.9" y="245" width="1.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="1074.88" y="255.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (40,328,240 samples, 0.09%)</title><rect x="892.5" y="325" width="1.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="895.48" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (40,373,380 samples, 0.09%)</title><rect x="647.7" y="421" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="650.74" y="431.5" ></text>
</g>
<g >
<title>get_page_from_freelist (281,228,667 samples, 0.63%)</title><rect x="161.6" y="53" width="7.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="164.56" y="63.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (40,307,568 samples, 0.09%)</title><rect x="905.2" y="389" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="908.20" y="399.5" ></text>
</g>
<g >
<title>decltype  (40,375,828 samples, 0.09%)</title><rect x="45.1" y="357" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="48.13" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&amp;&gt; (80,719,778 samples, 0.18%)</title><rect x="293.8" y="341" width="2.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="296.77" y="351.5" ></text>
</g>
<g >
<title>unmap_page_range (79,689,652 samples, 0.18%)</title><rect x="480.5" y="197" width="2.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="483.54" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::operator* (40,376,231 samples, 0.09%)</title><rect x="21.8" y="421" width="1.1" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="24.80" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;, unsigned long&gt; (120,716,596 samples, 0.27%)</title><rect x="325.6" y="357" width="3.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="328.62" y="367.5" ></text>
</g>
<g >
<title>pmd_val (40,280,831 samples, 0.09%)</title><rect x="170.1" y="165" width="1.0" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="173.05" y="175.5" ></text>
</g>
<g >
<title>__mod_memcg_lruvec_state (39,308,457 samples, 0.09%)</title><rect x="307.6" y="69" width="1.0" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="310.57" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (7,515,092 samples, 0.02%)</title><rect x="10.0" y="469" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_execve (7,515,092 samples, 0.02%)</title><rect x="10.0" y="437" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="13.00" y="447.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (80,549,064 samples, 0.18%)</title><rect x="463.6" y="357" width="2.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="466.57" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (40,369,051 samples, 0.09%)</title><rect x="816.4" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="819.43" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::destroy_buckets (119,737,398 samples, 0.27%)</title><rect x="477.4" y="389" width="3.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="480.37" y="399.5" ></text>
</g>
<g >
<title>irqentry_exit (40,005,626 samples, 0.09%)</title><rect x="171.1" y="197" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="174.12" y="207.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (39,784,159 samples, 0.09%)</title><rect x="99.2" y="229" width="1.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="102.17" y="239.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::max_size (40,374,982 samples, 0.09%)</title><rect x="317.1" y="373" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="320.13" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="293" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1187.69" y="303.5" ></text>
</g>
<g >
<title>x64_sys_call (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="309" width="1.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1187.69" y="319.5" ></text>
</g>
<g >
<title>unmap_page_range (39,308,457 samples, 0.09%)</title><rect x="307.6" y="165" width="1.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="310.57" y="175.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_istringstream (2,841,698,322 samples, 6.36%)</title><rect x="521.8" y="421" width="75.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="524.79" y="431.5" >std::__c..</text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (120,059,555 samples, 0.27%)</title><rect x="353.2" y="357" width="3.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="356.17" y="367.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator++ (2,040,350,737 samples, 4.57%)</title><rect x="237.7" y="341" width="53.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="240.73" y="351.5" >googl..</text>
</g>
<g >
<title>unmap_page_range (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="181" width="1.1" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1187.69" y="191.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,328,240 samples, 0.09%)</title><rect x="892.5" y="341" width="1.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="895.48" y="351.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (799,495,511 samples, 1.79%)</title><rect x="151.0" y="229" width="21.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="154.05" y="239.5" ></text>
</g>
<g >
<title>alloc_anon_folio (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="229" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1191.94" y="239.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (40,204,740 samples, 0.09%)</title><rect x="894.6" y="341" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="897.60" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_relocate (160,644,344 samples, 0.36%)</title><rect x="1185.8" y="389" width="4.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1188.76" y="399.5" ></text>
</g>
<g >
<title>__munmap (79,689,652 samples, 0.18%)</title><rect x="480.5" y="373" width="2.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="483.54" y="383.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (40,328,240 samples, 0.09%)</title><rect x="892.5" y="197" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="895.48" y="207.5" ></text>
</g>
<g >
<title>void google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::copy_or_move_from&lt;google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt; &gt; (9,531,917,897 samples, 21.34%)</title><rect x="50.4" y="357" width="251.9" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="53.41" y="367.5" >void google::dense_hashtable&lt;std:..</text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_stringstream (2,996,214,854 samples, 6.71%)</title><rect x="650.9" y="421" width="79.2" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="653.93" y="431.5" >std::__cx..</text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (39,841,801 samples, 0.09%)</title><rect x="288.5" y="293" width="1.0" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="291.47" y="303.5" ></text>
</g>
<g >
<title>malloc (39,985,444 samples, 0.09%)</title><rect x="556.7" y="341" width="1.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="559.74" y="351.5" ></text>
</g>
<g >
<title>_copy_to_iter (120,920,980 samples, 0.27%)</title><rect x="932.7" y="213" width="3.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="935.70" y="223.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (160,862,801 samples, 0.36%)</title><rect x="643.5" y="357" width="4.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="646.49" y="367.5" ></text>
</g>
<g >
<title>handle_mm_fault (120,298,402 samples, 0.27%)</title><rect x="1186.8" y="293" width="3.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1189.82" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,327,089 samples, 0.09%)</title><rect x="602.2" y="389" width="1.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="605.21" y="399.5" ></text>
</g>
<g >
<title>change_prot_numa (40,211,836 samples, 0.09%)</title><rect x="904.1" y="277" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="907.14" y="287.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (240,783,940 samples, 0.54%)</title><rect x="719.5" y="389" width="6.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="722.49" y="399.5" ></text>
</g>
<g >
<title>change_protection_range (40,211,836 samples, 0.09%)</title><rect x="904.1" y="245" width="1.1" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="907.14" y="255.5" ></text>
</g>
<g >
<title>__handle_mm_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="325" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1183.54" y="335.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (40,250,501 samples, 0.09%)</title><rect x="1169.2" y="389" width="1.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1172.20" y="399.5" ></text>
</g>
<g >
<title>get_page_from_freelist (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="165" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1191.94" y="175.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (40,360,561 samples, 0.09%)</title><rect x="688.1" y="389" width="1.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="691.06" y="399.5" ></text>
</g>
<g >
<title>x64_sys_call (79,689,652 samples, 0.18%)</title><rect x="480.5" y="325" width="2.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="483.54" y="335.5" ></text>
</g>
<g >
<title>rw_verify_area (200,655,924 samples, 0.45%)</title><rect x="1070.8" y="277" width="5.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1073.81" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (79,951,140 samples, 0.18%)</title><rect x="557.8" y="389" width="2.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="560.79" y="399.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (198,855,273 samples, 0.45%)</title><rect x="569.3" y="389" width="5.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="572.33" y="399.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (40,303,192 samples, 0.09%)</title><rect x="530.2" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="533.23" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; read_tsv_column&lt;unsigned long&gt; (26,769,716,080 samples, 59.95%)</title><rect x="482.6" y="437" width="707.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="485.64" y="447.5" >std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; read_tsv_column&lt;unsigned long&gt;</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7,515,092 samples, 0.02%)</title><rect x="10.0" y="485" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>change_p4d_range (40,211,836 samples, 0.09%)</title><rect x="904.1" y="229" width="1.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="907.14" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (40,367,606 samples, 0.09%)</title><rect x="516.5" y="357" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="519.49" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::~_Alloc_hider (79,982,582 samples, 0.18%)</title><rect x="624.4" y="405" width="2.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="627.41" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (762,689,775 samples, 1.71%)</title><rect x="627.6" y="405" width="20.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="630.59" y="415.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long&gt;::operator (79,916,454 samples, 0.18%)</title><rect x="472.1" y="341" width="2.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="475.07" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator* (80,628,008 samples, 0.18%)</title><rect x="283.2" y="293" width="2.1" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="286.16" y="303.5" ></text>
</g>
<g >
<title>[libc.so.6] (80,506,158 samples, 0.18%)</title><rect x="636.1" y="341" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="639.06" y="351.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (40,365,506 samples, 0.09%)</title><rect x="16.5" y="437" width="1.1" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="19.51" y="447.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (40,031,877 samples, 0.09%)</title><rect x="481.6" y="133" width="1.0" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="484.58" y="143.5" ></text>
</g>
<g >
<title>ydb-hashtables- (44,656,617,878 samples, 100.00%)</title><rect x="10.0" y="517" width="1180.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >ydb-hashtables-</text>
</g>
<g >
<title>read (6,308,250,330 samples, 14.13%)</title><rect x="909.4" y="389" width="166.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="912.43" y="399.5" >read</text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (40,063,500 samples, 0.09%)</title><rect x="561.0" y="389" width="1.0" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="563.96" y="399.5" ></text>
</g>
<g >
<title>decltype  (79,756,775 samples, 0.18%)</title><rect x="229.3" y="309" width="2.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="232.26" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (320,913,985 samples, 0.72%)</title><rect x="30.3" y="357" width="8.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="33.29" y="367.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (40,204,740 samples, 0.09%)</title><rect x="894.6" y="325" width="1.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="897.60" y="335.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::__get_helper&lt;0ul, unsigned long const&amp;&gt; (400,615,011 samples, 0.90%)</title><rect x="174.3" y="213" width="10.6" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="177.30" y="223.5" ></text>
</g>
<g >
<title>decltype  (440,818,751 samples, 0.99%)</title><rect x="271.5" y="293" width="11.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="274.51" y="303.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (39,784,159 samples, 0.09%)</title><rect x="99.2" y="277" width="1.0" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="102.17" y="287.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char*, char, false&gt;::pointer_to (120,443,789 samples, 0.27%)</title><rect x="619.1" y="405" width="3.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="622.14" y="415.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (40,328,240 samples, 0.09%)</title><rect x="892.5" y="277" width="1.0" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="895.48" y="287.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (40,041,760 samples, 0.09%)</title><rect x="190.1" y="245" width="1.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="193.09" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (200,971,069 samples, 0.45%)</title><rect x="642.4" y="373" width="5.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="645.43" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="229" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1183.54" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (547,127,681 samples, 1.23%)</title><rect x="1175.5" y="421" width="14.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1178.54" y="431.5" ></text>
</g>
<g >
<title>do_user_addr_fault (481,270,715 samples, 1.08%)</title><rect x="158.4" y="197" width="12.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="161.40" y="207.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (39,784,159 samples, 0.09%)</title><rect x="99.2" y="133" width="1.0" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="102.17" y="143.5" ></text>
</g>
<g >
<title>x64_sys_call (39,308,457 samples, 0.09%)</title><rect x="307.6" y="293" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="310.57" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (241,415,475 samples, 0.54%)</title><rect x="612.8" y="405" width="6.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="615.76" y="415.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::fill_range_with_empty (5,724,077,748 samples, 12.82%)</title><rect x="71.7" y="325" width="151.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="74.65" y="335.5" >google::dense_hasht..</text>
</g>
<g >
<title>perf_event_task_tick (39,756,557 samples, 0.09%)</title><rect x="306.5" y="197" width="1.1" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="309.52" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (39,999,039 samples, 0.09%)</title><rect x="687.0" y="389" width="1.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="690.00" y="399.5" ></text>
</g>
<g >
<title>clear_bhb_loop (118,346,470 samples, 0.27%)</title><rect x="915.8" y="357" width="3.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="918.78" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (79,254,252 samples, 0.18%)</title><rect x="281.1" y="261" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="284.06" y="271.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::bucket_count (39,812,162 samples, 0.09%)</title><rect x="44.1" y="373" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="47.07" y="383.5" ></text>
</g>
<g >
<title>char const* std::__addressof&lt;char const&gt; (40,348,960 samples, 0.09%)</title><rect x="840.7" y="293" width="1.1" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="843.73" y="303.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (39,708,473 samples, 0.09%)</title><rect x="1170.3" y="421" width="1.0" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1173.26" y="431.5" ></text>
</g>
<g >
<title>malloc (401,783,689 samples, 0.90%)</title><rect x="676.4" y="341" width="10.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="679.38" y="351.5" ></text>
</g>
<g >
<title>__count_memcg_events (40,202,393 samples, 0.09%)</title><rect x="159.4" y="85" width="1.1" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="162.43" y="95.5" ></text>
</g>
<g >
<title>scheduler_tick (39,784,159 samples, 0.09%)</title><rect x="99.2" y="165" width="1.0" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="102.17" y="175.5" ></text>
</g>
<g >
<title>decltype  (39,851,045 samples, 0.09%)</title><rect x="230.3" y="293" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="233.31" y="303.5" ></text>
</g>
<g >
<title>do_vmi_munmap (79,689,652 samples, 0.18%)</title><rect x="480.5" y="277" width="2.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="483.54" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (240,156,649 samples, 0.54%)</title><rect x="820.7" y="373" width="6.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="823.68" y="383.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::size (40,349,973 samples, 0.09%)</title><rect x="318.2" y="373" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="321.20" y="383.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (80,075,092 samples, 0.18%)</title><rect x="338.3" y="373" width="2.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="341.32" y="383.5" ></text>
</g>
<g >
<title>change_pmd_range.isra.0 (40,211,836 samples, 0.09%)</title><rect x="904.1" y="213" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="907.14" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (38,415,275 samples, 0.09%)</title><rect x="13.4" y="437" width="1.0" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="16.37" y="447.5" ></text>
</g>
<g >
<title>operator new (40,151,563 samples, 0.09%)</title><rect x="539.8" y="373" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="542.78" y="383.5" ></text>
</g>
<g >
<title>rep_movs_alternative (3,991,011,938 samples, 8.94%)</title><rect x="935.9" y="213" width="105.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="938.89" y="223.5" >rep_movs_alt..</text>
</g>
<g >
<title>do_vmi_munmap (39,308,457 samples, 0.09%)</title><rect x="307.6" y="245" width="1.0" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="310.57" y="255.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (40,057,625 samples, 0.09%)</title><rect x="329.9" y="389" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="332.87" y="399.5" ></text>
</g>
<g >
<title>std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_extract_int&lt;unsigned long&gt; (2,641,103,241 samples, 5.91%)</title><rect x="1100.5" y="405" width="69.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1103.47" y="415.5" >std::is..</text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt; google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::insert_at&lt;unsigned long const&amp;, unsigned long&gt; (40,357,841 samples, 0.09%)</title><rect x="26.0" y="405" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="29.05" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (479,024,467 samples, 1.07%)</title><rect x="730.1" y="421" width="12.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="733.10" y="431.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (39,756,557 samples, 0.09%)</title><rect x="306.5" y="293" width="1.1" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="309.52" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (241,327,189 samples, 0.54%)</title><rect x="898.8" y="389" width="6.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="901.83" y="399.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="245" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1187.69" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (39,308,457 samples, 0.09%)</title><rect x="307.6" y="325" width="1.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="310.57" y="335.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_deleted (79,990,602 samples, 0.18%)</title><rect x="319.3" y="373" width="2.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="322.26" y="383.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (40,080,976 samples, 0.09%)</title><rect x="27.1" y="405" width="1.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="30.12" y="415.5" ></text>
</g>
<g >
<title>unmap_single_vma (39,308,457 samples, 0.09%)</title><rect x="307.6" y="181" width="1.0" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="310.57" y="191.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (280,987,700 samples, 0.63%)</title><rect x="264.1" y="293" width="7.4" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="267.08" y="303.5" ></text>
</g>
<g >
<title>xas_load (40,207,700 samples, 0.09%)</title><rect x="1068.7" y="213" width="1.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1071.69" y="223.5" ></text>
</g>
<g >
<title>ksys_read (5,909,377,341 samples, 13.23%)</title><rect x="920.0" y="309" width="156.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="922.97" y="319.5" >ksys_read</text>
</g>
<g >
<title>decltype  (281,171,903 samples, 0.63%)</title><rect x="348.9" y="373" width="7.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="351.91" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (599,278,143 samples, 1.34%)</title><rect x="864.1" y="389" width="15.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="867.08" y="399.5" ></text>
</g>
<g >
<title>std::locale::locale (40,291,913 samples, 0.09%)</title><rect x="725.8" y="389" width="1.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="728.85" y="399.5" ></text>
</g>
<g >
<title>vma_alloc_folio (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="261" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1183.54" y="271.5" ></text>
</g>
<g >
<title>change_pte_range (40,211,836 samples, 0.09%)</title><rect x="904.1" y="197" width="1.1" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="907.14" y="207.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (77,845,673 samples, 0.17%)</title><rect x="693.4" y="405" width="2.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="696.36" y="415.5" ></text>
</g>
<g >
<title>unsigned long google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::hash&lt;unsigned long&gt; (161,026,441 samples, 0.36%)</title><rect x="295.9" y="341" width="4.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="298.90" y="351.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (119,955,630 samples, 0.27%)</title><rect x="225.0" y="325" width="3.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="228.02" y="335.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (320,845,980 samples, 0.72%)</title><rect x="340.4" y="373" width="8.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="343.44" y="383.5" ></text>
</g>
<g >
<title>operator new (39,985,444 samples, 0.09%)</title><rect x="556.7" y="357" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="559.74" y="367.5" ></text>
</g>
<g >
<title>clear_page_erms (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="197" width="1.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1183.54" y="207.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::bucket_count (40,313,302 samples, 0.09%)</title><rect x="38.8" y="389" width="1.0" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="41.77" y="399.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_M_head (40,036,672 samples, 0.09%)</title><rect x="176.4" y="197" width="1.1" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="179.41" y="207.5" ></text>
</g>
<g >
<title>std::remove_reference&lt;std::allocator&lt;char&gt;&amp;&gt;::type&amp;&amp; std::move&lt;std::allocator&lt;char&gt;&amp;&gt; (39,749,862 samples, 0.09%)</title><rect x="610.6" y="389" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="613.65" y="399.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::__get_helper&lt;0ul, unsigned long const&amp;&gt; (39,673,778 samples, 0.09%)</title><rect x="185.9" y="229" width="1.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="188.95" y="239.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (161,011,547 samples, 0.36%)</title><rect x="743.8" y="421" width="4.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="746.82" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (39,308,457 samples, 0.09%)</title><rect x="307.6" y="277" width="1.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="310.57" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (40,235,714 samples, 0.09%)</title><rect x="1089.9" y="405" width="1.1" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1092.91" y="415.5" ></text>
</g>
<g >
<title>decltype  (3,695,921,396 samples, 8.28%)</title><rect x="365.9" y="357" width="97.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="368.91" y="367.5" >decltype </text>
</g>
<g >
<title>read_tsc (40,367,606 samples, 0.09%)</title><rect x="516.5" y="261" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="519.49" y="271.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (40,328,240 samples, 0.09%)</title><rect x="892.5" y="293" width="1.0" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="895.48" y="303.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (40,367,606 samples, 0.09%)</title><rect x="516.5" y="373" width="1.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="519.49" y="383.5" ></text>
</g>
<g >
<title>do_user_addr_fault (120,298,402 samples, 0.27%)</title><rect x="1186.8" y="309" width="3.2" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1189.82" y="319.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long const&amp;, false&gt;::_M_head (200,456,106 samples, 0.45%)</title><rect x="179.6" y="181" width="5.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="182.59" y="191.5" ></text>
</g>
<g >
<title>unsigned long&amp;&amp; std::forward&lt;unsigned long&gt; (40,257,681 samples, 0.09%)</title><rect x="476.3" y="389" width="1.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="479.31" y="399.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (119,955,630 samples, 0.27%)</title><rect x="225.0" y="309" width="3.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="228.02" y="319.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_empty (80,068,929 samples, 0.18%)</title><rect x="46.2" y="357" width="2.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="49.19" y="367.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;, 0ul&gt; (2,196,442,569 samples, 4.92%)</title><rect x="132.0" y="245" width="58.1" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="135.05" y="255.5" >std::p..</text>
</g>
<g >
<title>[libstdc++.so.6.0.33] (80,052,494 samples, 0.18%)</title><rect x="1167.1" y="389" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1170.08" y="399.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::construct_key (4,562,696,923 samples, 10.22%)</title><rect x="102.3" y="293" width="120.6" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="105.34" y="303.5" >google::dense_h..</text>
</g>
<g >
<title>get_random_u16 (7,515,092 samples, 0.02%)</title><rect x="10.0" y="293" width="0.2" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (40,328,240 samples, 0.09%)</title><rect x="892.5" y="309" width="1.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="895.48" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (40,352,281 samples, 0.09%)</title><rect x="742.8" y="421" width="1.0" height="15.0" fill="rgb(220,71,16)" rx="2" ry="2" />
<text  x="745.76" y="431.5" ></text>
</g>
<g >
<title>update_process_times (39,756,557 samples, 0.09%)</title><rect x="306.5" y="229" width="1.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="309.52" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (200,983,586 samples, 0.45%)</title><rect x="836.5" y="373" width="5.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="839.49" y="383.5" ></text>
</g>
<g >
<title>update_process_times (39,784,159 samples, 0.09%)</title><rect x="99.2" y="181" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="102.17" y="191.5" ></text>
</g>
<g >
<title>zap_pte_range (79,689,652 samples, 0.18%)</title><rect x="480.5" y="165" width="2.1" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="483.54" y="175.5" ></text>
</g>
<g >
<title>unmap_region (39,308,457 samples, 0.09%)</title><rect x="307.6" y="213" width="1.0" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="310.57" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, unsigned long&gt;::pair&lt;unsigned long const&amp;, unsigned long&amp;&gt; (120,088,346 samples, 0.27%)</title><rect x="467.8" y="373" width="3.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="470.83" y="383.5" ></text>
</g>
<g >
<title>exc_page_fault (120,298,402 samples, 0.27%)</title><rect x="1186.8" y="325" width="3.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1189.82" y="335.5" ></text>
</g>
<g >
<title>arch_align_stack (7,515,092 samples, 0.02%)</title><rect x="10.0" y="309" width="0.2" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (40,284,086 samples, 0.09%)</title><rect x="829.1" y="373" width="1.1" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="832.15" y="383.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,081,300,884 samples, 2.42%)</title><rect x="489.0" y="421" width="28.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="491.99" y="431.5" >[l..</text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (120,408,087 samples, 0.27%)</title><rect x="285.3" y="293" width="3.2" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="288.29" y="303.5" ></text>
</g>
<g >
<title>std::locale::~locale (39,925,098 samples, 0.09%)</title><rect x="729.0" y="389" width="1.1" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="732.04" y="399.5" ></text>
</g>
<g >
<title>filemap_read (5,388,144,340 samples, 12.07%)</title><rect x="928.4" y="245" width="142.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="931.44" y="255.5" >filemap_read</text>
</g>
<g >
<title>[libc.so.6] (79,801,045 samples, 0.18%)</title><rect x="832.3" y="357" width="2.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="835.31" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (120,824,698 samples, 0.27%)</title><rect x="853.4" y="373" width="3.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="856.44" y="383.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::clear_to_size (5,844,893,735 samples, 13.09%)</title><rect x="68.5" y="341" width="154.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="71.46" y="351.5" >google::dense_hasht..</text>
</g>
<g >
<title>__x64_sys_munmap (79,689,652 samples, 0.18%)</title><rect x="480.5" y="309" width="2.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="483.54" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (2,189,277,715 samples, 4.90%)</title><rect x="787.1" y="389" width="57.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="790.12" y="399.5" >std::_..</text>
</g>
<g >
<title>cfree (400,706,854 samples, 0.90%)</title><rect x="731.2" y="405" width="10.6" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="734.17" y="415.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (12,575,052,099 samples, 28.16%)</title><rect x="748.1" y="421" width="332.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="751.08" y="431.5" >std::basic_istream&lt;char, std::char_traits&lt;ch..</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::base (40,366,195 samples, 0.09%)</title><rect x="20.7" y="421" width="1.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="23.73" y="431.5" ></text>
</g>
<g >
<title>sync_regs (40,274,674 samples, 0.09%)</title><rect x="184.9" y="229" width="1.0" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="187.88" y="239.5" ></text>
</g>
<g >
<title>char const* std::__addressof&lt;char const&gt; (40,298,059 samples, 0.09%)</title><rect x="646.7" y="325" width="1.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="649.67" y="335.5" ></text>
</g>
<g >
<title>free@plt (40,083,426 samples, 0.09%)</title><rect x="520.7" y="421" width="1.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="523.73" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::underflow (39,932,680 samples, 0.09%)</title><rect x="1096.2" y="405" width="1.1" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1099.23" y="415.5" ></text>
</g>
<g >
<title>filemap_get_pages (1,074,648,749 samples, 2.41%)</title><rect x="1041.4" y="229" width="28.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1044.35" y="239.5" >fi..</text>
</g>
<g >
<title>google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator[] (39,966,559 samples, 0.09%)</title><rect x="11.3" y="437" width="1.0" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="14.26" y="447.5" ></text>
</g>
<g >
<title>do_anonymous_page (401,885,693 samples, 0.90%)</title><rect x="159.4" y="133" width="10.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="162.43" y="143.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;::pair&lt;unsigned long const&amp;&gt; (2,397,199,628 samples, 5.37%)</title><rect x="127.8" y="261" width="63.3" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="130.80" y="271.5" >std::p..</text>
</g>
<g >
<title>do_user_addr_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="357" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1183.54" y="367.5" ></text>
</g>
<g >
<title>zap_pte_range (39,308,457 samples, 0.09%)</title><rect x="307.6" y="133" width="1.0" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="310.57" y="143.5" ></text>
</g>
<g >
<title>decltype  (40,373,818 samples, 0.09%)</title><rect x="66.3" y="325" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="69.33" y="335.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (79,689,652 samples, 0.18%)</title><rect x="480.5" y="181" width="2.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="483.54" y="191.5" ></text>
</g>
<g >
<title>std::tuple_element&lt;0ul, std::tuple&lt;unsigned long const&amp;&gt; &gt;::type&amp; std::get&lt;0ul, unsigned long const&amp;&gt; (481,036,746 samples, 1.08%)</title><rect x="172.2" y="229" width="12.7" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="175.17" y="239.5" ></text>
</g>
<g >
<title>std::__ptr_traits_ptr_to&lt;char const*, char const, false&gt;::pointer_to (120,809,266 samples, 0.27%)</title><rect x="838.6" y="325" width="3.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="841.61" y="335.5" ></text>
</g>
<g >
<title>void google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::set_value&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; (40,373,433 samples, 0.09%)</title><rect x="301.2" y="341" width="1.1" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="304.21" y="351.5" ></text>
</g>
<g >
<title>lru_gen_del_folio.constprop.0 (40,031,877 samples, 0.09%)</title><rect x="481.6" y="85" width="1.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="484.58" y="95.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_deleted (80,619,167 samples, 0.18%)</title><rect x="356.3" y="373" width="2.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="359.34" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (361,592,392 samples, 0.81%)</title><rect x="638.2" y="389" width="9.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="641.18" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long&gt;::operator (40,155,506 samples, 0.09%)</title><rect x="270.4" y="261" width="1.1" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="273.45" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (799,720,021 samples, 1.79%)</title><rect x="603.3" y="421" width="21.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="606.28" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::max_size (79,953,993 samples, 0.18%)</title><rect x="815.4" y="357" width="2.1" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="818.38" y="367.5" ></text>
</g>
<g >
<title>std::locale::locale (79,967,676 samples, 0.18%)</title><rect x="1171.3" y="421" width="2.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1174.31" y="431.5" ></text>
</g>
<g >
<title>do_anonymous_page (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="293" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1183.54" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,028,682 samples, 0.09%)</title><rect x="884.2" y="373" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="887.16" y="383.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_empty (399,867,038 samples, 0.90%)</title><rect x="222.9" y="341" width="10.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="225.90" y="351.5" ></text>
</g>
<g >
<title>perf_event_task_tick (39,784,159 samples, 0.09%)</title><rect x="99.2" y="149" width="1.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="102.17" y="159.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (120,298,402 samples, 0.27%)</title><rect x="1186.8" y="341" width="3.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1189.82" y="351.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64 (40,367,606 samples, 0.09%)</title><rect x="516.5" y="293" width="1.1" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="519.49" y="303.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (320,913,985 samples, 0.72%)</title><rect x="30.3" y="373" width="8.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="33.29" y="383.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::~dense_hashtable (199,427,050 samples, 0.45%)</title><rect x="477.4" y="405" width="5.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="480.37" y="415.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (1,034,441,049 samples, 2.32%)</title><rect x="1041.4" y="213" width="27.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1044.35" y="223.5" >f..</text>
</g>
<g >
<title>operator new (481,757,590 samples, 1.08%)</title><rect x="674.3" y="357" width="12.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="677.27" y="367.5" ></text>
</g>
<g >
<title>irqentry_exit (40,211,836 samples, 0.09%)</title><rect x="904.1" y="341" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="907.14" y="351.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::equals&lt;unsigned long, unsigned long&gt; (40,186,239 samples, 0.09%)</title><rect x="250.4" y="309" width="1.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="253.36" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; std::forward&lt;std::pair&lt;unsigned long const, unsigned long&gt;&amp;&gt; (80,169,676 samples, 0.18%)</title><rect x="461.5" y="341" width="2.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="464.46" y="351.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_empty (39,391,156 samples, 0.09%)</title><rect x="237.7" y="325" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="240.73" y="335.5" ></text>
</g>
<g >
<title>__munmap (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="357" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1187.69" y="367.5" ></text>
</g>
<g >
<title>perf_adjust_freq_unthr_context (39,756,557 samples, 0.09%)</title><rect x="306.5" y="181" width="1.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="309.52" y="191.5" ></text>
</g>
<g >
<title>__alloc_pages (321,548,692 samples, 0.72%)</title><rect x="160.5" y="69" width="8.5" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="163.49" y="79.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (120,680,055 samples, 0.27%)</title><rect x="362.7" y="341" width="3.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="365.73" y="351.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (40,026,514 samples, 0.09%)</title><rect x="812.2" y="341" width="1.1" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="815.21" y="351.5" ></text>
</g>
<g >
<title>perf_event_task_tick (40,328,240 samples, 0.09%)</title><rect x="892.5" y="213" width="1.0" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="895.48" y="223.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (40,108,268 samples, 0.09%)</title><rect x="642.4" y="357" width="1.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="645.43" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (80,142,654 samples, 0.18%)</title><rect x="827.0" y="373" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="830.03" y="383.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (39,906,281 samples, 0.09%)</title><rect x="893.5" y="341" width="1.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="896.55" y="351.5" ></text>
</g>
<g >
<title>unsigned long google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::hash&lt;unsigned long&gt; (120,145,349 samples, 0.27%)</title><rect x="471.0" y="357" width="3.2" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="474.00" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (882,931,606 samples, 1.98%)</title><rect x="624.4" y="421" width="23.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="627.41" y="431.5" >s..</text>
</g>
<g >
<title>alloc_anon_folio (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="277" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1183.54" y="287.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long const&amp;&gt;::_M_head (280,592,932 samples, 0.63%)</title><rect x="177.5" y="197" width="7.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="180.47" y="207.5" ></text>
</g>
<g >
<title>x64_sys_call (7,515,092 samples, 0.02%)</title><rect x="10.0" y="453" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="13.00" y="463.5" ></text>
</g>
<g >
<title>operator new (39,954,730 samples, 0.09%)</title><rect x="814.3" y="325" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="817.33" y="335.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (7,515,092 samples, 0.02%)</title><rect x="10.0" y="421" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (40,260,742 samples, 0.09%)</title><rect x="291.6" y="341" width="1.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="294.64" y="351.5" ></text>
</g>
<g >
<title>scheduler_tick (39,756,557 samples, 0.09%)</title><rect x="306.5" y="213" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="309.52" y="223.5" ></text>
</g>
<g >
<title>std::locale::~locale (37,977,252 samples, 0.09%)</title><rect x="741.8" y="405" width="1.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="744.75" y="415.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1,000,056,633 samples, 2.24%)</title><rect x="567.3" y="405" width="26.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="570.26" y="415.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_istringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_istringstream (241,984,536 samples, 0.54%)</title><rect x="596.9" y="421" width="6.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="599.88" y="431.5" ></text>
</g>
<g >
<title>lockref_put_return (40,364,792 samples, 0.09%)</title><rect x="925.2" y="261" width="1.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="928.24" y="271.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (80,114,934 samples, 0.18%)</title><rect x="813.3" y="341" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="816.27" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (80,111,021 samples, 0.18%)</title><rect x="893.5" y="357" width="2.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="896.55" y="367.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_deleted (39,792,519 samples, 0.09%)</title><rect x="289.5" y="309" width="1.1" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="292.52" y="319.5" ></text>
</g>
<g >
<title>std::locale::locale (40,134,207 samples, 0.09%)</title><rect x="717.4" y="373" width="1.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="720.36" y="383.5" ></text>
</g>
<g >
<title>do_vmi_munmap (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="261" width="1.1" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1187.69" y="271.5" ></text>
</g>
<g >
<title>update_process_times (40,328,240 samples, 0.09%)</title><rect x="892.5" y="245" width="1.0" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="895.48" y="255.5" ></text>
</g>
<g >
<title>do_anonymous_page (80,002,539 samples, 0.18%)</title><rect x="1187.9" y="245" width="2.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1190.89" y="255.5" ></text>
</g>
<g >
<title>decltype  (40,300,718 samples, 0.09%)</title><rect x="251.4" y="309" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="254.42" y="319.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (388,070,523 samples, 0.87%)</title><rect x="699.7" y="389" width="10.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="702.65" y="399.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (321,548,692 samples, 0.72%)</title><rect x="160.5" y="85" width="8.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="163.49" y="95.5" ></text>
</g>
<g >
<title>do_syscall_64 (5,949,525,531 samples, 13.32%)</title><rect x="918.9" y="357" width="157.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="921.91" y="367.5" >do_syscall_64</text>
</g>
<g >
<title>unsigned long google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::hash&lt;unsigned long&gt; (80,634,719 samples, 0.18%)</title><rect x="474.2" y="389" width="2.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="477.18" y="399.5" ></text>
</g>
<g >
<title>touch_atime (40,326,331 samples, 0.09%)</title><rect x="1069.7" y="229" width="1.1" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1072.75" y="239.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (40,090,131 samples, 0.09%)</title><rect x="360.6" y="357" width="1.1" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="363.60" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="389" width="1.1" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1187.69" y="399.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (80,521,180 samples, 0.18%)</title><rect x="617.0" y="389" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="620.01" y="399.5" ></text>
</g>
<g >
<title>__cond_resched (39,431,566 samples, 0.09%)</title><rect x="922.1" y="261" width="1.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="925.08" y="271.5" ></text>
</g>
<g >
<title>operator new (80,147,687 samples, 0.18%)</title><rect x="1181.6" y="389" width="2.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1184.61" y="399.5" ></text>
</g>
<g >
<title>std::istream::sentry::sentry (160,599,292 samples, 0.36%)</title><rect x="1076.1" y="405" width="4.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1079.12" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (5,147,544,401 samples, 11.53%)</title><rect x="771.3" y="405" width="136.0" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="774.32" y="415.5" >std::__cxx11::bas..</text>
</g>
<g >
<title>change_protection (40,211,836 samples, 0.09%)</title><rect x="904.1" y="261" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="907.14" y="271.5" ></text>
</g>
<g >
<title>vfs_read (5,909,377,341 samples, 13.23%)</title><rect x="920.0" y="293" width="156.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="922.97" y="303.5" >vfs_read</text>
</g>
<g >
<title>std::pair&lt;unsigned long const, unsigned long&gt;&amp; google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::find_or_insert&lt;unsigned long, unsigned long const&amp;&gt; (16,999,656,224 samples, 38.07%)</title><rect x="28.2" y="405" width="449.2" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="31.18" y="415.5" >std::pair&lt;unsigned long const, unsigned long&gt;&amp; google::dense_..</text>
</g>
<g >
<title>operator new (120,987,252 samples, 0.27%)</title><rect x="124.6" y="261" width="3.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="127.61" y="271.5" ></text>
</g>
<g >
<title>void std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (200,911,385 samples, 0.45%)</title><rect x="1184.7" y="405" width="5.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1187.69" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (200,983,586 samples, 0.45%)</title><rect x="836.5" y="357" width="5.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="839.49" y="367.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (79,689,652 samples, 0.18%)</title><rect x="480.5" y="261" width="2.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="483.54" y="271.5" ></text>
</g>
<g >
<title>alloc_anon_folio (321,548,692 samples, 0.72%)</title><rect x="160.5" y="117" width="8.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="163.49" y="127.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;unsigned long&gt;::deallocate (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="373" width="1.1" height="15.0" fill="rgb(243,174,41)" rx="2" ry="2" />
<text  x="1187.69" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="341" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1183.54" y="351.5" ></text>
</g>
<g >
<title>decltype  (40,087,070 samples, 0.09%)</title><rect x="519.7" y="421" width="1.0" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="522.68" y="431.5" ></text>
</g>
<g >
<title>char const* std::addressof&lt;char const&gt; (80,595,549 samples, 0.18%)</title><rect x="645.6" y="341" width="2.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="648.61" y="351.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (116,955,237 samples, 0.26%)</title><rect x="187.0" y="229" width="3.1" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="190.00" y="239.5" ></text>
</g>
<g >
<title>all (44,656,642,500 samples, 100%)</title><rect x="10.0" y="533" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>__fsnotify_parent (239,848,350 samples, 0.54%)</title><rect x="920.0" y="277" width="6.3" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="922.97" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (240,626,968 samples, 0.54%)</title><rect x="809.0" y="357" width="6.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="812.03" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (120,528,191 samples, 0.27%)</title><rect x="613.8" y="389" width="3.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="616.83" y="399.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::hash_munger&lt;unsigned long&gt;::MungedHash (40,228,895 samples, 0.09%)</title><rect x="471.0" y="341" width="1.1" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="474.00" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (40,369,601 samples, 0.09%)</title><rect x="913.7" y="373" width="1.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="916.67" y="383.5" ></text>
</g>
<g >
<title>unsigned long const&amp; std::forward&lt;unsigned long const&amp;&gt; (120,423,217 samples, 0.27%)</title><rect x="210.2" y="245" width="3.2" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="213.18" y="255.5" ></text>
</g>
<g >
<title>google::sparsehash_internal::sh_hashtable_settings&lt;unsigned long, std::hash&lt;unsigned long&gt;, unsigned long, 4&gt;::use_empty (40,322,237 samples, 0.09%)</title><rect x="290.6" y="309" width="1.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="293.57" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (40,246,703 samples, 0.09%)</title><rect x="822.8" y="341" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="825.79" y="351.5" ></text>
</g>
<g >
<title>__vm_munmap (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="277" width="1.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1187.69" y="287.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (40,368,031 samples, 0.09%)</title><rect x="1080.4" y="421" width="1.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1083.36" y="431.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (481,522,593 samples, 1.08%)</title><rect x="574.6" y="389" width="12.7" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="577.58" y="399.5" ></text>
</g>
<g >
<title>unsigned long* std::__relocate_a&lt;unsigned long*, unsigned long*, std::allocator&lt;unsigned long&gt; &gt; (160,644,344 samples, 0.36%)</title><rect x="1185.8" y="373" width="4.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1188.76" y="383.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="389" width="1.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1183.54" y="399.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (39,784,159 samples, 0.09%)</title><rect x="99.2" y="293" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="102.17" y="303.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,211,836 samples, 0.09%)</title><rect x="904.1" y="373" width="1.1" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="907.14" y="383.5" ></text>
</g>
<g >
<title>std::locale::operator= (120,657,507 samples, 0.27%)</title><rect x="584.1" y="373" width="3.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="587.12" y="383.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (78,376,472 samples, 0.18%)</title><rect x="834.4" y="357" width="2.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="837.42" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (39,913,884 samples, 0.09%)</title><rect x="627.6" y="389" width="1.0" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="630.59" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, unsigned long&gt; google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::find_position&lt;unsigned long&gt; (5,421,200,334 samples, 12.14%)</title><rect x="330.9" y="389" width="143.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="333.93" y="399.5" >std::pair&lt;unsigned..</text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (198,347,666 samples, 0.44%)</title><rect x="562.0" y="405" width="5.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="565.02" y="415.5" ></text>
</g>
<g >
<title>exc_page_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="373" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1183.54" y="383.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (5,468,873,067 samples, 12.25%)</title><rect x="926.3" y="277" width="144.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="929.31" y="287.5" >ext4_file_read_iter</text>
</g>
<g >
<title>__mod_memcg_lruvec_state (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="85" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1187.69" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (923,710,317 samples, 2.07%)</title><rect x="664.7" y="405" width="24.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="667.72" y="415.5" >s..</text>
</g>
<g >
<title>[libc.so.6] (240,932,061 samples, 0.54%)</title><rect x="735.4" y="389" width="6.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="738.39" y="399.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (39,756,557 samples, 0.09%)</title><rect x="306.5" y="325" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="309.52" y="335.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator* (39,114,372 samples, 0.09%)</title><rect x="49.4" y="357" width="1.0" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="52.38" y="367.5" ></text>
</g>
<g >
<title>google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey::operator (80,110,778 samples, 0.18%)</title><rect x="100.2" y="293" width="2.1" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="103.22" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (39,308,457 samples, 0.09%)</title><rect x="307.6" y="309" width="1.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="310.57" y="319.5" ></text>
</g>
<g >
<title>void google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::set_value&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; (40,147,149 samples, 0.09%)</title><rect x="302.3" y="357" width="1.0" height="15.0" fill="rgb(233,128,30)" rx="2" ry="2" />
<text  x="305.28" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_capacity (160,731,600 samples, 0.36%)</title><rect x="796.6" y="373" width="4.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="799.64" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::allocate (40,339,520 samples, 0.09%)</title><rect x="817.5" y="357" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="820.50" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (120,116,950 samples, 0.27%)</title><rect x="841.8" y="373" width="3.2" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="844.80" y="383.5" ></text>
</g>
<g >
<title>operator new (36,538,156 samples, 0.08%)</title><rect x="1183.7" y="405" width="1.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1186.73" y="415.5" ></text>
</g>
<g >
<title>xas_descend (120,930,620 samples, 0.27%)</title><rect x="1064.4" y="181" width="3.2" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1067.44" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1,162,874,413 samples, 2.60%)</title><rect x="531.3" y="405" width="30.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="534.30" y="415.5" >st..</text>
</g>
<g >
<title>unmap_single_vma (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="197" width="1.1" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1187.69" y="207.5" ></text>
</g>
<g >
<title>__vm_munmap (79,689,652 samples, 0.18%)</title><rect x="480.5" y="293" width="2.1" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="483.54" y="303.5" ></text>
</g>
<g >
<title>google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::test_empty (4,138,492,441 samples, 9.27%)</title><rect x="358.5" y="373" width="109.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="361.47" y="383.5" >google::dense..</text>
</g>
<g >
<title>vma_alloc_folio (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="213" width="1.1" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1191.94" y="223.5" ></text>
</g>
<g >
<title>unsigned long google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::hash&lt;unsigned long&gt; (120,145,349 samples, 0.27%)</title><rect x="471.0" y="373" width="3.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="474.00" y="383.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (40,367,606 samples, 0.09%)</title><rect x="516.5" y="389" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="519.49" y="399.5" ></text>
</g>
<g >
<title>_raw_spin_lock (39,853,415 samples, 0.09%)</title><rect x="1187.9" y="229" width="1.0" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1190.89" y="239.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="245" width="1.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1183.54" y="255.5" ></text>
</g>
<g >
<title>[libc.so.6] (44,649,102,786 samples, 99.98%)</title><rect x="10.2" y="469" width="1179.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="13.20" y="479.5" >[libc.so.6]</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (6,308,250,330 samples, 14.13%)</title><rect x="909.4" y="405" width="166.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="912.43" y="415.5" >std::basic_filebuf&lt;ch..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="341" width="1.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1187.69" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::capacity (715,819,743 samples, 1.60%)</title><rect x="879.9" y="389" width="18.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="882.91" y="399.5" ></text>
</g>
<g >
<title>google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;::deallocate (79,689,652 samples, 0.18%)</title><rect x="480.5" y="389" width="2.1" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="483.54" y="399.5" ></text>
</g>
<g >
<title>__fsnotify_parent (80,140,823 samples, 0.18%)</title><rect x="1070.8" y="261" width="2.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1073.81" y="271.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long const&amp;&gt; std::forward_as_tuple&lt;unsigned long const&amp;&gt; (840,773,246 samples, 1.88%)</title><rect x="191.1" y="261" width="22.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="194.15" y="271.5" >s..</text>
</g>
<g >
<title>std::ios_base::_M_init (40,353,933 samples, 0.09%)</title><rect x="593.7" y="405" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="596.69" y="415.5" ></text>
</g>
<g >
<title>copy_page_to_iter (4,111,932,918 samples, 9.21%)</title><rect x="932.7" y="229" width="108.7" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="935.70" y="239.5" >copy_page_to_..</text>
</g>
<g >
<title>bool __gnu_cxx::operator==&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (40,279,932 samples, 0.09%)</title><rect x="10.2" y="437" width="1.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="13.20" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (120,809,266 samples, 0.27%)</title><rect x="838.6" y="341" width="3.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="841.61" y="351.5" ></text>
</g>
<g >
<title>task_numa_work (40,211,836 samples, 0.09%)</title><rect x="904.1" y="293" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="907.14" y="303.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (40,202,393 samples, 0.09%)</title><rect x="159.4" y="117" width="1.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="162.43" y="127.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::advance_past_empty_and_deleted (2,000,959,581 samples, 4.48%)</title><rect x="238.8" y="325" width="52.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="241.77" y="335.5" >googl..</text>
</g>
<g >
<title>decltype  (160,490,616 samples, 0.36%)</title><rect x="276.8" y="261" width="4.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="279.82" y="271.5" ></text>
</g>
<g >
<title>decltype  (40,373,818 samples, 0.09%)</title><rect x="66.3" y="309" width="1.1" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="69.33" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (200,554,167 samples, 0.45%)</title><rect x="821.7" y="357" width="5.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="824.73" y="367.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (40,328,240 samples, 0.09%)</title><rect x="892.5" y="357" width="1.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="895.48" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_allocate (40,265,566 samples, 0.09%)</title><rect x="830.2" y="373" width="1.1" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="833.21" y="383.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;char&gt;::deallocate (160,405,430 samples, 0.36%)</title><rect x="633.9" y="373" width="4.3" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="636.95" y="383.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (362,481,428 samples, 0.81%)</title><rect x="709.9" y="389" width="9.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="712.91" y="399.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (40,031,877 samples, 0.09%)</title><rect x="481.6" y="149" width="1.0" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="484.58" y="159.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (80,417,650 samples, 0.18%)</title><rect x="862.0" y="373" width="2.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="864.95" y="383.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy (40,359,000 samples, 0.09%)</title><rect x="906.3" y="389" width="1.0" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="909.27" y="399.5" ></text>
</g>
<g >
<title>handle_pte_fault (40,365,979 samples, 0.09%)</title><rect x="1180.5" y="309" width="1.1" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1183.54" y="319.5" ></text>
</g>
<g >
<title>setup_arg_pages (7,515,092 samples, 0.02%)</title><rect x="10.0" y="325" width="0.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>cfree (120,703,595 samples, 0.27%)</title><rect x="635.0" y="357" width="3.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="637.99" y="367.5" ></text>
</g>
<g >
<title>generic_file_read_iter (5,388,144,340 samples, 12.07%)</title><rect x="928.4" y="261" width="142.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="931.44" y="271.5" >generic_file_read_..</text>
</g>
<g >
<title>google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator[] (17,200,577,355 samples, 38.52%)</title><rect x="22.9" y="421" width="454.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="25.87" y="431.5" >google::dense_hash_map&lt;unsigned long, unsigned long, std::hash..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_get_allocator (40,340,366 samples, 0.09%)</title><rect x="689.1" y="405" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="692.12" y="415.5" ></text>
</g>
<g >
<title>fsnotify (40,316,965 samples, 0.09%)</title><rect x="924.2" y="261" width="1.0" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="927.17" y="271.5" ></text>
</g>
<g >
<title>tick_sched_handle (39,756,557 samples, 0.09%)</title><rect x="306.5" y="245" width="1.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="309.52" y="255.5" ></text>
</g>
<g >
<title>decltype  (119,977,718 samples, 0.27%)</title><rect x="64.2" y="341" width="3.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="67.22" y="351.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (39,784,159 samples, 0.09%)</title><rect x="99.2" y="213" width="1.0" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="102.17" y="223.5" ></text>
</g>
<g >
<title>memcpy@plt (40,063,192 samples, 0.09%)</title><rect x="876.8" y="373" width="1.0" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="879.77" y="383.5" ></text>
</g>
<g >
<title>vma_alloc_folio (321,548,692 samples, 0.72%)</title><rect x="160.5" y="101" width="8.5" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="163.49" y="111.5" ></text>
</g>
<g >
<title>google::dense_hashtable_iterator&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator!= (161,045,500 samples, 0.36%)</title><rect x="233.5" y="341" width="4.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="236.47" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (79,158,473 samples, 0.18%)</title><rect x="907.3" y="405" width="2.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="910.34" y="415.5" ></text>
</g>
<g >
<title>cfree (80,072,092 samples, 0.18%)</title><rect x="517.6" y="421" width="2.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="520.56" y="431.5" ></text>
</g>
<g >
<title>unmap_region (40,267,041 samples, 0.09%)</title><rect x="1184.7" y="229" width="1.1" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1187.69" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (481,270,715 samples, 1.08%)</title><rect x="158.4" y="181" width="12.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="161.40" y="191.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (40,149,124 samples, 0.09%)</title><rect x="1188.9" y="197" width="1.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.94" y="207.5" ></text>
</g>
<g >
<title>std::__is_constant_evaluated (38,184,648 samples, 0.09%)</title><rect x="835.5" y="341" width="1.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="838.48" y="351.5" ></text>
</g>
<g >
<title>xas_load (200,806,202 samples, 0.45%)</title><rect x="1063.4" y="197" width="5.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1066.38" y="207.5" ></text>
</g>
<g >
<title>bool google::dense_hashtable&lt;std::pair&lt;unsigned long const, unsigned long&gt;, unsigned long, std::hash&lt;unsigned long&gt;, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SelectKey, google::dense_hash_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::SetKey, std::equal_to&lt;unsigned long&gt;, google::libc_allocator_with_realloc&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::KeyInfo::equals&lt;unsigned long, unsigned long&gt; (161,050,989 samples, 0.36%)</title><rect x="344.7" y="357" width="4.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="347.66" y="367.5" ></text>
</g>
<g >
<title>tick_sched_handle (39,784,159 samples, 0.09%)</title><rect x="99.2" y="197" width="1.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="102.17" y="207.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (39,756,557 samples, 0.09%)</title><rect x="306.5" y="261" width="1.1" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="309.52" y="271.5" ></text>
</g>
<g >
<title>apparmor_file_permission (40,268,945 samples, 0.09%)</title><rect x="1075.1" y="245" width="1.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1078.05" y="255.5" ></text>
</g>
</g>
</svg>
